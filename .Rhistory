# Clean up names to match up athletes
# Clean up apparatus names (VT1 VT_1) DONE
# Separate qualifying & final (or superscore, etc)
# Do basic analysis based on the team
library(dplyr)
library(tidyr)
library(stringi)
library(stringr)
library(lubridate)
data_2223
# Split when there are spaces in between first names we are only checking when
# first name and last name and country matches for a person
data_2223 = separate(data_2223, FirstName, into = c("FirstName", "OtherName"),
sep = "^\\S*\\K\\s+")
#Removing all accents
apply(data_2223,2,function(x) stringi::stri_trans_general(x, "Latin-ASCII") )
# Convert all names to upper case
data_2223$FirstName = toupper(data_2223$FirstName)
data_2223$LastName = toupper(data_2223$LastName)
# Rename columns so that the same event is grouped together
data_2223$Apparatus <- gsub("hb", "HB", data_2223$Apparatus)
data_2223$Apparatus <- gsub("VT_1", "VT1", data_2223$Apparatus)
data_2223$Apparatus <- gsub("VT_2", "VT2", data_2223$Apparatus)
data_2223$Country <- gsub("CCS", "GUA", data_2223$Country)
data_2223$Country <- gsub("ENG", "GBR", data_2223$Country)
data_2223$Country <- gsub("IOM", "GBR", data_2223$Country)
data_2223$Country <- gsub("JEY", "GBR", data_2223$Country)
data_2223$Country <- gsub("SCO", "GBR", data_2223$Country)
data_2223$Country <- gsub("WAL", "GBR", data_2223$Country)
data_2223$Country <- gsub("GE1", "GER", data_2223$Country)
data_2223$Country <- gsub("GE2", "GER", data_2223$Country)
data_2223$Country <- gsub("NIR", "IRL", data_2223$Country) # come back to this if there are new athletes cause they might not all be IRL
#Remove all duplicated rows
data_2223 = distinct(data_2223)
# Extract start dates and end dates
convertDate <- function(daterange){
daterange = gsub(",","",daterange)
dates = str_split(daterange,"-",simplify = T)
endDate = dmy(trimws(dates[2]))
start = str_split(trimws(dates[1])," ")[[1]]
if(length(start) ==1){
#print(paste(dates[1],format(as.Date(endDate, format="%d-%m-%Y"),"%m-%Y"),sep="-"))
startDate = dmy(paste(dates[1],format(as.Date(endDate, format="%d-%m-%Y"),"%m-%Y"),sep="-"))
}else if(length(start)==2){
startDate = dmy(paste(dates[1],format(as.Date(endDate, format="%d-%m-%Y"),"%Y"),sep="-"))
}else{
startDate = dmy(dates[1])
}
return(c(paste(startDate),paste(endDate)))
}
startDates = unlist(lapply(data_2223$Date,function(x) convertDate(x)[1]),use.names = F)
endDates = unlist(lapply(data_2223$Date,function(x) convertDate(x)[2]),use.names = F)
data_2223$StartDate = startDates
data_2223$EndDate = endDates
unlist(lapply(mtcars, mean), use.names = FALSE)
for(date in data_2223$Date){
convertDate(date)
print(date)
}
# Split data by gender
men <- data_2223[data_2223$Gender == "m",]
women <- data_2223[data_2223$Gender == "w",]
# Further split data by event (so split is now by event by gender)
apparatus_men = sort(unique(men$Apparatus))
apparatus_group_men = men %>% group_by(Apparatus)
events_m = group_split(apparatus_group_men)
for(event in events_m){
assign(paste(event$Apparatus[1],"m",sep="_"), event)
}
apparatus_women = sort(unique(women$Apparatus))
apparatus_group_women = women %>% group_by(Apparatus)
events_w = group_split(apparatus_group_women)
for(event in events_w){
assign(paste(event$Apparatus[1],"w",sep="_"), event)
}
# the names of the events for the different genders, we access the event data
# by gender by indicating the event and gender e.g. 'VT_w'
apparatus_men
apparatus_women
# Find athletes with missing countries to fill later by matching with existing athletes
data_2223 = data_2223 %>% group_by(FirstName,LastName) %>%
mutate(Country = sort(Country,decreasing=T)[1])
data_2223 |> filter(Country == '') |> select(LastName, FirstName, Country) |>
unique()
data_2223$outlier <- (data_2223$LastName == "BARBOSA") + (data_2223$FirstName == "JADE")
data_2223[data_2223$outlier == 2,]$Country <- "BRA"
data_2223$outlier <- (data_2223$LastName == "DJORDJEVIC") + (data_2223$FirstName == "DUSAN")
data_2223[data_2223$outlier == 2,]$Country <- "SRB"
data_2223$outlier <- (data_2223$LastName == "GRÃœNBERG") + (data_2223$FirstName == "JERMAIN")
data_2223[data_2223$outlier == 2,]$Country <- "NED"
data_2223$outlier <- (data_2223$LastName == "JONASSON") + (data_2223$FirstName == "ARNTHOR")
data_2223[data_2223$outlier == 2,]$Country <- "ISL"
data_2223$outlier <- (data_2223$LastName == "LIMA") + (data_2223$FirstName == "ANA")
data_2223[data_2223$outlier == 2,]$Country <- "BRA"
data_2223$outlier <- (data_2223$LastName == "MEULEMAN") + (data_2223$FirstName == "CASEY-JANE")
data_2223[data_2223$outlier == 2,]$Country <- "NED"
data_2223$outlier <- (data_2223$LastName == "POGHOSYAN") + (data_2223$FirstName == "MANE")
data_2223[data_2223$outlier == 2,]$Country <- "ARM"
data_2223$outlier <- (data_2223$LastName == "RAPOSO") + (data_2223$FirstName == "CLARA")
data_2223[data_2223$outlier == 2,]$Country <- "CAN"
data_2223$outlier <- (data_2223$LastName == "TOVMASYAN") + (data_2223$FirstName == "ARTUR")
data_2223[data_2223$outlier == 2,]$Country <- "ARM"
data_2223$outlier <- (data_2223$LastName == "ZANETTI") + (data_2223$FirstName == "ARTHUR")
data_2223[data_2223$outlier == 2,]$Country <- "BRA"
data_2223 <- subset(data_2223, select = -outlier)
#Remove all duplicated rows
data_2223 = distinct(data_2223)
# Extract start dates and end dates
convertDate <- function(daterange){
daterange = gsub(",","",daterange)
dates = str_split(daterange,"-",simplify = T)
endDate = dmy(trimws(dates[2]))
start = str_split(trimws(dates[1])," ")[[1]]
if(length(start) ==1){
#print(paste(dates[1],format(as.Date(endDate, format="%d-%m-%Y"),"%m-%Y"),sep="-"))
startDate = dmy(paste(dates[1],format(as.Date(endDate, format="%d-%m-%Y"),"%m-%Y"),sep="-"))
}else if(length(start)==2){
startDate = dmy(paste(dates[1],format(as.Date(endDate, format="%d-%m-%Y"),"%Y"),sep="-"))
}else{
startDate = dmy(dates[1])
}
return(c(paste(startDate),paste(endDate)))
}
startDates = unlist(lapply(data_2223$Date,function(x) convertDate(x)[1]),use.names = F)
endDates = unlist(lapply(data_2223$Date,function(x) convertDate(x)[2]),use.names = F)
data_2223$StartDate = startDates
data_2223$EndDate = endDates
unlist(lapply(mtcars, mean), use.names = FALSE)
for(date in data_2223$Date){
convertDate(date)
print(date)
}
# Split data by gender
men <- data_2223[data_2223$Gender == "m",]
women <- data_2223[data_2223$Gender == "w",]
# Further split data by event (so split is now by event by gender)
apparatus_men = sort(unique(men$Apparatus))
apparatus_group_men = men %>% group_by(Apparatus)
events_m = group_split(apparatus_group_men)
for(event in events_m){
assign(paste(event$Apparatus[1],"m",sep="_"), event)
}
apparatus_women = sort(unique(women$Apparatus))
apparatus_group_women = women %>% group_by(Apparatus)
events_w = group_split(apparatus_group_women)
for(event in events_w){
assign(paste(event$Apparatus[1],"w",sep="_"), event)
}
# the names of the events for the different genders, we access the event data
# by gender by indicating the event and gender e.g. 'VT_w'
apparatus_men
apparatus_women
# Find athletes with missing countries to fill later by matching with existing athletes
data_2223 = data_2223 %>% group_by(FirstName,LastName) %>%
mutate(Country = sort(Country,decreasing=T)[1])
data_2223 |> filter(Country == '') |> select(LastName, FirstName, Country) |>
unique()
library(dplyr)
library(purrr)
options(dplyr.summarise.inform = FALSE)
apparatus_list_men = paste(apparatus_men,"m",sep="_")
apparatus_list_women = paste(apparatus_women,"w",sep="_")
apparatus_scores_men = paste(apparatus_list_men,"scores",sep="_")
apparatus_scores_women = paste(apparatus_list_women,"scores",sep="_")
for(i in 1:length(apparatus_list_men)){
assign(apparatus_scores_men[i],eval(as.name(apparatus_list_men[i])) %>%
group_by(FirstName,LastName) %>%
summarise(avg_score = mean(Score,na.rm=T),var_score =
ifelse(is.na(var(Score)),0,var(Score)),Country=Country[1]) %>%
arrange(var_score)%>%
head(-floor(nrow(.)/15))%>%
arrange(desc(avg_score)))
}
for(i in 1:length(apparatus_list_women)){
assign(apparatus_scores_women[i],eval(as.name(apparatus_list_women[i])) %>%
group_by(FirstName,LastName) %>%
summarise(avg_score = mean(Score,na.rm=T),var_score =
ifelse(is.na(var(Score)),0,var(Score)),Country=Country[1]) %>%
arrange(var_score) %>%
head(-floor(nrow(.)/15))%>%
arrange(desc(avg_score)))
}
# Choosing 12 countries for the men and women
countries_men <- c('CHN', 'JPN', 'GBR', 'ITA', 'USA', 'ESP',
'BRA', 'KOR', 'GER', 'CAN', 'TUR', 'HUN')
countries_women <- c('USA', 'GBR', 'CAN', 'BRA', 'ITA', 'CHN',
'JPN', 'FRA', 'NED', 'HUN', 'ROU', 'BEL')
for(event in apparatus_scores_men){
paste(event,"USA top 5")
print(eval(as.name(event)) %>%
filter(Country=='USA') %>%
head(5))
}
for(event in apparatus_scores_women){
paste(event,"USA top 5")
print(eval(as.name(event)) %>%
filter(Country=='USA') %>%
head(5))
}
apparatus_scores_men
apparatus_scores_women
for(event in apparatus_scores_men){
paste(event,"GBR top 5")
print(eval(as.name(event)) %>%
filter(Country=='GBR') %>%
head(5))
}
for(event in apparatus_scores_women){
for (country in countries_women){
paste(event, country, " top 5")
print(eval(as.name(event)) %>%
filter(Country==country) %>%
head(5))
}
}
ex <- BB_w_scores |> group_by(Country) |> group_nest() |>
filter(Country %in% countries_women) |>
mutate(top5 = map(data, ~ head(.x, 5)))
for (country in countries_women){
paste(event, country, " top 5")
print(eval(as.name(event)) %>%
filter(Country==country) %>%
head(5))
}
men_pivot <- data_2223 %>%
filter(Gender == 'm', Country %in% countries_men) %>%
group_by(FirstName, LastName, Country, Apparatus) %>%
summarize(avg_score = mean(Score,na.rm=T),
var_score = ifelse(is.na(var(Score)),0,var(Score)),
Country=Country[1]) %>%
pivot_wider(names_from = c(Apparatus), values_from = c(avg_score, var_score)) %>%
select("FirstName", "LastName", "Country",
paste0(rep(c("avg_score_", "var_score_"), 8), sort(rep(apparatus_men,2))))
women_pivot <- data_2223 %>%
filter(Gender == 'w', Country %in% countries_women) %>%
group_by(FirstName, LastName, Country, Apparatus) %>%
summarize(avg_score = mean(Score,na.rm=T),
var_score = ifelse(is.na(var(Score)),0,var(Score)),
Country=Country[1]) %>%
pivot_wider(names_from = c(Apparatus), values_from = c(avg_score, var_score),
names_sort = T) %>%
select("FirstName", "LastName", "Country",
paste0(rep(c("avg_score_", "var_score_"), 4), sort(rep(apparatus_women,2))))
men_pivot
View(men_pivot)
View(women_pivot)
View(men_pivot)
# Separate data frames for men and women DONE
# Separate by apparatus DONE
# Remove duplicate rows
# Clean up names to match up athletes
# Clean up apparatus names (VT1 VT_1) DONE
# Separate qualifying & final (or superscore, etc)
# Do basic analysis based on the team
library(dplyr)
library(tidyr)
library(stringi)
library(stringr)
library(lubridate)
data_2223
# Split when there are spaces in between first names we are only checking when
# first name and last name and country matches for a person
data_2223 = separate(data_2223, FirstName, into = c("FirstName", "OtherName"),
sep = "^\\S*\\K\\s+")
#Removing all accents
apply(data_2223,2,function(x) stringi::stri_trans_general(x, "Latin-ASCII") )
# Convert all names to upper case
data_2223$FirstName = toupper(data_2223$FirstName)
data_2223$LastName = toupper(data_2223$LastName)
# Rename columns so that the same event is grouped together
data_2223$Apparatus <- gsub("hb", "HB", data_2223$Apparatus)
data_2223$Apparatus <- gsub("VT_1", "VT1", data_2223$Apparatus)
data_2223$Apparatus <- gsub("VT_2", "VT2", data_2223$Apparatus)
data_2223$Country <- gsub("CCS", "GUA", data_2223$Country)
data_2223$Country <- gsub("ENG", "GBR", data_2223$Country)
data_2223$Country <- gsub("IOM", "GBR", data_2223$Country)
data_2223$Country <- gsub("JEY", "GBR", data_2223$Country)
data_2223$Country <- gsub("SCO", "GBR", data_2223$Country)
data_2223$Country <- gsub("WAL", "GBR", data_2223$Country)
data_2223$Country <- gsub("GE1", "GER", data_2223$Country)
data_2223$Country <- gsub("GE2", "GER", data_2223$Country)
data_2223$Country <- gsub("NIR", "IRL", data_2223$Country) # come back to this if there are new athletes cause they might not all be IRL
data_2223$outlier <- (data_2223$LastName == "BARBOSA") + (data_2223$FirstName == "JADE")
data_2223[data_2223$outlier == 2,]$Country <- "BRA"
data_2223$outlier <- (data_2223$LastName == "DJORDJEVIC") + (data_2223$FirstName == "DUSAN")
data_2223[data_2223$outlier == 2,]$Country <- "SRB"
data_2223$outlier <- (data_2223$LastName == "GRÃœNBERG") + (data_2223$FirstName == "JERMAIN")
data_2223[data_2223$outlier == 2,]$Country <- "NED"
data_2223$outlier <- (data_2223$LastName == "JONASSON") + (data_2223$FirstName == "ARNTHOR")
data_2223[data_2223$outlier == 2,]$Country <- "ISL"
data_2223$outlier <- (data_2223$LastName == "LIMA") + (data_2223$FirstName == "ANA")
data_2223[data_2223$outlier == 2,]$Country <- "BRA"
data_2223$outlier <- (data_2223$LastName == "MEULEMAN") + (data_2223$FirstName == "CASEY-JANE")
data_2223[data_2223$outlier == 2,]$Country <- "NED"
data_2223$outlier <- (data_2223$LastName == "POGHOSYAN") + (data_2223$FirstName == "MANE")
data_2223[data_2223$outlier == 2,]$Country <- "ARM"
data_2223$outlier <- (data_2223$LastName == "RAPOSO") + (data_2223$FirstName == "CLARA")
data_2223[data_2223$outlier == 2,]$Country <- "CAN"
data_2223$outlier <- (data_2223$LastName == "TOVMASYAN") + (data_2223$FirstName == "ARTUR")
data_2223[data_2223$outlier == 2,]$Country <- "ARM"
data_2223$outlier <- (data_2223$LastName == "ZANETTI") + (data_2223$FirstName == "ARTHUR")
data_2223[data_2223$outlier == 2,]$Country <- "BRA"
data_2223 <- subset(data_2223, select = -outlier)
#Remove all duplicated rows
data_2223 = distinct(data_2223)
# Extract start dates and end dates
convertDate <- function(daterange){
daterange = gsub(",","",daterange)
dates = str_split(daterange,"-",simplify = T)
endDate = dmy(trimws(dates[2]))
start = str_split(trimws(dates[1])," ")[[1]]
if(length(start) ==1){
#print(paste(dates[1],format(as.Date(endDate, format="%d-%m-%Y"),"%m-%Y"),sep="-"))
startDate = dmy(paste(dates[1],format(as.Date(endDate, format="%d-%m-%Y"),"%m-%Y"),sep="-"))
}else if(length(start)==2){
startDate = dmy(paste(dates[1],format(as.Date(endDate, format="%d-%m-%Y"),"%Y"),sep="-"))
}else{
startDate = dmy(dates[1])
}
return(c(paste(startDate),paste(endDate)))
}
startDates = unlist(lapply(data_2223$Date,function(x) convertDate(x)[1]),use.names = F)
endDates = unlist(lapply(data_2223$Date,function(x) convertDate(x)[2]),use.names = F)
data_2223$StartDate = startDates
data_2223$EndDate = endDates
unlist(lapply(mtcars, mean), use.names = FALSE)
for(date in data_2223$Date){
convertDate(date)
print(date)
}
# Split data by gender
men <- data_2223[data_2223$Gender == "m",]
women <- data_2223[data_2223$Gender == "w",]
# Further split data by event (so split is now by event by gender)
apparatus_men = sort(unique(men$Apparatus))
apparatus_group_men = men %>% group_by(Apparatus)
events_m = group_split(apparatus_group_men)
for(event in events_m){
assign(paste(event$Apparatus[1],"m",sep="_"), event)
}
apparatus_women = sort(unique(women$Apparatus))
apparatus_group_women = women %>% group_by(Apparatus)
events_w = group_split(apparatus_group_women)
for(event in events_w){
assign(paste(event$Apparatus[1],"w",sep="_"), event)
}
# the names of the events for the different genders, we access the event data
# by gender by indicating the event and gender e.g. 'VT_w'
apparatus_men
apparatus_women
# Find athletes with missing countries to fill later by matching with existing athletes
data_2223 = data_2223 %>% group_by(FirstName,LastName) %>%
mutate(Country = sort(Country,decreasing=T)[1])
data_2223 |> filter(Country == '') |> select(LastName, FirstName, Country) |>
unique()
apparatus_list_men = paste(apparatus_men,"m",sep="_")
apparatus_list_women = paste(apparatus_women,"w",sep="_")
library(dplyr)
library(purrr)
options(dplyr.summarise.inform = FALSE)
apparatus_list_men = paste(apparatus_men,"m",sep="_")
apparatus_list_women = paste(apparatus_women,"w",sep="_")
apparatus_scores_men = paste(apparatus_list_men,"scores",sep="_")
apparatus_scores_women = paste(apparatus_list_women,"scores",sep="_")
for(i in 1:length(apparatus_list_men)){
assign(apparatus_scores_men[i],eval(as.name(apparatus_list_men[i])) %>%
group_by(FirstName,LastName) %>%
summarise(avg_score = mean(Score,na.rm=T),var_score =
ifelse(is.na(var(Score)),0,var(Score)),Country=Country[1]) %>%
arrange(var_score)%>%
head(-floor(nrow(.)/15))%>%
arrange(desc(avg_score)))
}
for(i in 1:length(apparatus_list_women)){
assign(apparatus_scores_women[i],eval(as.name(apparatus_list_women[i])) %>%
group_by(FirstName,LastName) %>%
summarise(avg_score = mean(Score,na.rm=T),var_score =
ifelse(is.na(var(Score)),0,var(Score)),Country=Country[1]) %>%
arrange(var_score) %>%
head(-floor(nrow(.)/15))%>%
arrange(desc(avg_score)))
}
# Choosing 12 countries for the men and women
countries_men <- c('CHN', 'JPN', 'GBR', 'ITA', 'USA', 'ESP',
'BRA', 'KOR', 'GER', 'CAN', 'TUR', 'HUN')
countries_women <- c('USA', 'GBR', 'CAN', 'BRA', 'ITA', 'CHN',
'JPN', 'FRA', 'NED', 'HUN', 'ROU', 'BEL')
for(event in apparatus_scores_men){
paste(event,"USA top 5")
print(eval(as.name(event)) %>%
filter(Country=='USA') %>%
head(5))
}
for(event in apparatus_scores_women){
paste(event,"USA top 5")
print(eval(as.name(event)) %>%
filter(Country=='USA') %>%
head(5))
}
apparatus_scores_men
apparatus_scores_women
for(event in apparatus_scores_men){
paste(event,"GBR top 5")
print(eval(as.name(event)) %>%
filter(Country=='GBR') %>%
head(5))
}
for(event in apparatus_scores_women){
for (country in countries_women){
paste(event, country, " top 5")
print(eval(as.name(event)) %>%
filter(Country==country) %>%
head(5))
}
}
ex <- BB_w_scores |> group_by(Country) |> group_nest() |>
filter(Country %in% countries_women) |>
mutate(top5 = map(data, ~ head(.x, 5)))
ex
View(ex)
for (country in countries_women){
paste(event, country, " top 5")
print(eval(as.name(event)) %>%
filter(Country==country) %>%
head(5))
}
men_pivot <- data_2223 %>%
filter(Gender == 'm', Country %in% countries_men) %>%
group_by(FirstName, LastName, Country, Apparatus) %>%
summarize(avg_score = mean(Score,na.rm=T),
var_score = ifelse(is.na(var(Score)),0,var(Score)),
Country=Country[1]) %>%
pivot_wider(names_from = c(Apparatus), values_from = c(avg_score, var_score)) %>%
select("FirstName", "LastName", "Country",
paste0(rep(c("avg_score_", "var_score_"), 8), sort(rep(apparatus_men,2))))
women_pivot <- data_2223 %>%
filter(Gender == 'w', Country %in% countries_women) %>%
group_by(FirstName, LastName, Country, Apparatus) %>%
summarize(avg_score = mean(Score,na.rm=T),
var_score = ifelse(is.na(var(Score)),0,var(Score)),
Country=Country[1]) %>%
pivot_wider(names_from = c(Apparatus), values_from = c(avg_score, var_score),
names_sort = T) %>%
select("FirstName", "LastName", "Country",
paste0(rep(c("avg_score_", "var_score_"), 4), sort(rep(apparatus_women,2))))
View(women_pivot)
women_pivot
men_scores_full
names(men_pivot)
men_pivot$composite_score <- men_pivot$avg_score_FX + men_pivot$avg_score_HB + men_pivot$avg_score_PB + men_pivot$avg_score_PH + men_pivot$avg_score_SR + mean(na.omit(c(men_pivot$avg_score_VT, men_pivot$avg_score_VT1, me_pivot$avg_score_VT2)))
men_pivot$composite_score <- men_pivot$avg_score_FX + men_pivot$avg_score_HB + men_pivot$avg_score_PB + men_pivot$avg_score_PH + men_pivot$avg_score_SR + mean(na.omit(c(men_pivot$avg_score_VT, men_pivot$avg_score_VT1, men_pivot$avg_score_VT2)))
Veiw(men_pivot)
View(men_pivot0)
View(men_pivot)
men_pivot$composite_score <- sum(na.omit(men_pivot$avg_score_FX, men_pivot$avg_score_HB, men_pivot$avg_score_PB, men_pivot$avg_score_PH , men_pivot$avg_score_SR, mean(na.omit(c(men_pivot$avg_score_VT, men_pivot$avg_score_VT1, men_pivot$avg_score_VT2)))))
View(men_pivot)
men_pivot$composite_score <- men_pivot$avg_score_FX + men_pivot$avg_score_HB + men_pivot$avg_score_PB + men_pivot$avg_score_PH + men_pivot$avg_score_SR + mean(na.omit(c(men_pivot$avg_score_VT, men_pivot$avg_score_VT1, men_pivot$avg_score_VT2)))
as.numeric(NA)
as.numeric(NaN)
men_pivot$avg_score_FX
is.na(men_pivot$avg_score_FX)
NA * 0
men_pivot_2 <- men_pivot
men_pivot_2[is.na(men_pivot_2)] <- 0
men_pivot$composite_score <- men_pivot_2$avg_score_FX + men_pivot_2$avg_score_HB + men_pivot_2$avg_score_PB + men_pivot_2$avg_score_PH + men_pivot_2$avg_score_SR + mean(na.omit(c(men_pivot$avg_score_VT, men_pivot$avg_score_VT1, men_pivot$avg_score_VT2)))
names(women_pivot_2)
women_pivot_2 <- women_pivot
women_pivot_2[is.na(women_pivot_2)] <- 0
women_pivot$composite_score <- women_pivot_2$avg_score_BB + women_pivot_2$avg_score_FX + women_pivot_2$avg_score_UB + mean(na.omit(c(women_pivot$avg_score_VT, women_pivot$avg_score_VT1, women_pivot$avg_score_VT2)))
men_pivot_3 <- sort(men_pivot$composite_score, decreasing=TRUE)
women_pivot_3 <- sort(women_pivot$composite_score, decreasing=TRUE)
men_sorted <- sort(men_pivot$composite_score, decreasing=TRUE)
women_sorted <- sort(women_pivot$composite_score, decreasing=TRUE)
View(men_sorted)
men_sorted <- men_pivot[sort(men_pivot$composite_score, decreasing=TRUE)]
women_sorted <- women_pivot[sort(women_pivot$composite_score, decreasing=TRUE)]
men_sorted <- men_pivot[sort(men_pivot$composite_score, decreasing=TRUE),]
women_sorted <- women_pivot[sort(women_pivot$composite_score, decreasing=TRUE),]
View(men_sorted)
men_sorted <- men_pivot
women_sorted <- women_pivot
men_sorted <- men_pivot[sort(men_pivot$composite_score, decreasing=TRUE),]
unique(men_pivot$composite_score)
sort(men_pivot$composite_score, decreasing=TRUE)
?sort
men_sorted <- order(men_sorted[-composite_score])
men_sorted <- order(men_pivot[-composite_score])
men_sorted <- order(men_pivot[composite_score])
men_sorted <- men_pivot[order(-composite_score),]
men_pivot_2 <- men_pivot
men_pivot_2[is.na(men_pivot_2)] <- 0
men_pivot$composite_score <- men_pivot_2$avg_score_FX + men_pivot_2$avg_score_HB + men_pivot_2$avg_score_PB + men_pivot_2$avg_score_PH + men_pivot_2$avg_score_SR + mean(na.omit(c(men_pivot$avg_score_VT, men_pivot$avg_score_VT1, men_pivot$avg_score_VT2)))
women_pivot_2 <- women_pivot
women_pivot_2[is.na(women_pivot_2)] <- 0
women_pivot$composite_score <- women_pivot_2$avg_score_BB + women_pivot_2$avg_score_FX + women_pivot_2$avg_score_UB + mean(na.omit(c(women_pivot$avg_score_VT, women_pivot$avg_score_VT1, women_pivot$avg_score_VT2)))
men_sorted <- men_pivot[order(-composite_score),]
men_sorted <- men_pivot[order(-men_pivot$composite_score),]
View(men_sorted)
women_sorted <- women_pivot[order(-women_pivot$composite_score),]
View(women_sorted)
ex
View(ex)
View(ex[[2]][[1]])
data
teams_men <- men_sorted |> group_by(Country) |> group_nest() |>
filter(Country %in% countries_men) |>
mutate(top5 = map(data, ~ head(.x, 5)))
teams_women <- men_sorted |> group_by(Country) |> group_nest() |>
filter(Country %in% countries_women) |>
mutate(top5 = map(data, ~ head(.x, 5)))
View(teams_men)
View(teams_men[[3]][[12]])
