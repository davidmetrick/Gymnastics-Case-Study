'JPN', 'FRA', 'NED', 'HUN', 'ROU', 'BEL')
# Create combined tables with avg/sd scores for each apparatus for each athlete
men_df <- data_2223 %>%
select(FirstName, LastName, Gender, Country, Apparatus, Score) %>%
drop_na() %>%
filter(Gender == 'm', Country %in% countries_men) %>%
group_by(FirstName, LastName, Country, Apparatus) %>%
summarize(avg_score = mean(Score,na.rm=T),
var_score = ifelse(is.na(var(Score)),0,sqrt(var(Score))),
Country=Country[1]) %>%
arrange(var_score) %>%
head(-floor(nrow(.)/15)) %>% mutate(fullname=paste(FirstName,LastName))
women_df <- data_2223 %>%
filter(Gender == 'w', Country %in% countries_women) %>%
group_by(FirstName, LastName, Country, Apparatus) %>%
summarize(avg_score = mean(Score,na.rm=T),
var_score = ifelse(is.na(var(Score)),0,sqrt(var(Score))),
Country=Country[1]) %>%
arrange(var_score) %>%
head(-floor(nrow(.)/15))%>% mutate(fullname=paste(FirstName,LastName))
#######
men_all_df = data_2223 %>%
select(FirstName, LastName, Gender, Country, Apparatus, Score) %>%
drop_na() %>%
filter(Gender == 'm') %>%
group_by(FirstName, LastName, Country, Apparatus) %>%
summarize(avg_score = mean(Score,na.rm=T),
var_score = ifelse(is.na(var(Score)),0,sqrt(var(Score))),
Country=Country[1]) %>%
arrange(var_score) %>%
head(-floor(nrow(.)/15))
men_others =men_all_df%>% group_by(FirstName,LastName,Country) %>%
summarise(Apparatus = "AA",avg_score=sum(avg_score),var_score=0)%>%
filter(!(Country %in% countries_men))%>%
arrange(avg_score)%>%head(36)%>% select(FirstName,LastName) %>%left_join(men_all_df)%>%
mutate(fullname=paste(FirstName,LastName))
women_all_df = data_2223 %>%
select(FirstName, LastName, Gender, Country, Apparatus, Score) %>%
drop_na() %>%
filter(Gender == 'm') %>%
group_by(FirstName, LastName, Country, Apparatus) %>%
summarize(avg_score = mean(Score,na.rm=T),
var_score = ifelse(is.na(var(Score)),0,sqrt(var(Score))),
Country=Country[1]) %>%
arrange(var_score) %>%
head(-floor(nrow(.)/15))
women_others =men_all_df%>% group_by(FirstName,LastName,Country) %>%
summarise(Apparatus = "AA",avg_score=sum(avg_score),var_score=0)%>%
filter(!(Country %in% countries_men))%>%
arrange(avg_score)%>%head(36)%>% select(FirstName,LastName) %>%left_join(men_all_df)%>%
mutate(fullname=paste(FirstName,LastName))
########
men_df_composite_top5 <- men_df%>% group_by(FirstName,LastName,Country) %>%
summarise(Apparatus = "AA",avg_score=sum(avg_score),var_score=0) %>%
group_by(Country) %>%slice_max(avg_score,n=3,with_ties = F) %>%
mutate(fullname = paste(FirstName, LastName))
women_df_composite_top5 <- women_df%>% group_by(FirstName,LastName,Country) %>%
summarise(Apparatus = "AA",avg_score=sum(avg_score),var_score=0) %>%
group_by(Country) %>%slice_max(avg_score,n=3,with_ties = F) %>%
mutate(fullname = paste(FirstName, LastName))
men_top5 <- men_df %>%
group_by(Country, Apparatus) %>%
slice_max(avg_score, n = 3, with_ties = F) %>% ungroup() %>%
mutate(fullname = paste(FirstName, LastName))
men_top5_names <- men_top5 %>% rbind(men_df_composite_top5)%>%
select(FirstName, LastName, Country) %>% unique()
women_top5 <- women_df %>%
group_by(Country, Apparatus) %>%
slice_max(avg_score, n = 4, with_ties = F)%>% ungroup()%>%
mutate(fullname = paste(FirstName, LastName))
women_top5_names <- women_top5 %>% rbind(women_df_composite_top5)%>%
select(FirstName, LastName, Country) %>% unique()
table(men_top5_names$Country)
table(women_top5_names$Country)
# --------SC-------
# If a combination contains 0 top 1 athletes for any event, exclude it
# we can change this to say how many top 1 athletes we require for a valid
# comb
contains_top_1<-function(comb,country_df,type="men"){
if(type=="men"){
min=1
}else{
min=1
}
top_1s = (country_df %>%group_by(Apparatus)%>%slice_max(avg_score,n=1,with_ties = F)%>%
ungroup()%>%select(fullname) %>% unique())[['fullname']]
return(length(intersect(as.vector(unlist(comb)),top_1s))>=min)
}
##################
set.seed(123)
source('teampick.R')
random_teams <- men_top5_names %>% group_by(Country) %>% sample_n(5) %>%
left_join(men_df) %>% arrange(FirstName, LastName)
team_roster <- random_teams
men_others
tm = Sys.time()
# Loop over countries one by one and go through each combination
for (country in countries_men){
print(country)
#current <- men_top5 %>%ungroup() %>%filter(Country == country)
current <- men_top5_names %>% filter(Country==country) %>%
left_join(men_df)
other_teams <- rbind(team_roster %>% filter(Country != country),men_others)
best_team <- team_pick(current, other_teams)
print(best_team)
# Update team list with optimal team
team_roster <- rbind(other_teams,
men_df %>% filter(fullname %in% unlist(best_team)))
}
random_teams <- women_top5_names %>% group_by(Country) %>% sample_n(5) %>%
left_join(women_df) %>% arrange(FirstName, LastName)
team_roster <- random_teams
tm = Sys.time()
# Loop over countries one by one and go through each combination
for (country in rep(countries_women,2)){
#ptm<-proc.time()
print(country)
#current <- women_top5 %>% filter(Country == country)
current <- women_top5_names %>% filter(Country==country) %>%
left_join(women_df)
other_teams <- team_roster %>% filter(Country != country)
best_team <- team_pick(current, other_teams)
print(as.vector(best_team))
# Update team list with optimal team
team_roster <- rbind(other_teams,
women_df%>% filter(fullname %in% unlist(best_team)))
#print(proc.time()-ptm)
}
library("parallel")
library("foreach")
library("doParallel")
team_pick <- function(country_df, others_df){
n<-10 # number of simulations of athletes
# Get country name
c <- country_df[1, "Country"] %>% as.character()
# Get all combinations of 5 athletes
comb <- country_df%>%
select(FirstName, LastName) %>%
mutate(name = paste(FirstName, LastName)) %>%
unique() %>% select(name) %>% unlist()%>% combn(5) %>% data.frame()
print(paste("Number of combinations",ncol(comb)))
# get a list of the athlete names from our country
team_names<- country_df %>% select(fullname) %>% unique() %>% unlist()
# The total potential lineup for qualifying, the exact combinations will be filtered later
qual_all <- rbind(country_df, others_df)
# Setting up workers for parallel processing
cl <- makeCluster(detectCores() -1)
registerDoParallel(cl, cores = detectCores()-1)
# looping through each of the simulations in parallel (all combinations are checked)
# for each simulation and stores the number of medals was for each of them
medal_scores2 = foreach(i = 1:n,.packages = c("dplyr"),.combine ="+",.inorder = FALSE)%dopar%{
##############
# NOTE
# Almost all the time of the code is not spent in this part of the loop
# Being a little inefficient is fine here, we want as many useful things
# for later being generated here
##############
medal_scores <- matrix(0,nrow = ncol(comb), ncol = 9)
colnames(medal_scores) <- c('team_g', 'team_s', 'team_b',
'aa_g', 'aa_s', 'aa_b',
'event_g', 'event_s', 'event_b')
# simulate scores for all athletes
qual_all$sim = rnorm(nrow(qual_all), qual_all$avg_score, qual_all$var_score)
# treat the all around like an additional event and add it to the dataframe
qual_all <- bind_rows(qual_all,qual_all%>% group_by(FirstName,LastName,Country,fullname) %>%
summarise(Apparatus = "AA",sim=sum(sim,na.rm = T)))
# Getting rid of unnecessary columns speeds up our code later when slicing data,etc
qual = qual_all %>% select(-c(FirstName,LastName,avg_score,var_score))
# Get simulation scores for other countries and current country of interest
other_team_sim <- qual %>% filter(Country!=c)
current_team_sim <- qual %>% filter(Country==c)
# Team round:
# We calculate the top 3 overall scores for all countries except the current country
# of interest. Choose best 3 for apparatus (Dumb way of picking top 3 for now)
team_comp <- other_team_sim %>% filter(Apparatus=="AA")%>%group_by(Country) %>%
slice_max(sim, n = 3, with_ties = F) %>%group_by(Country)%>% summarize(composite = sum(sim)) %>%
ungroup() %>% slice_max(composite,n=3,with_ties = F)
# Country of interest data frame for the all around
country_aa = current_team_sim%>%filter(Apparatus=="AA")
# We calculate the best score we could possibly have for the all-around, this lets
# us avoid having to find AA scores for each team combination later if its less than the
# third place score from other countries
country_best = country_aa%>%slice_max(sim, n = 3, with_ties = F)%>%select(sim) %>%sum()
country_can_win = as.logical(country_best >= team_comp[3,"composite"])
# Initialise team medals for all-around (updated when country_can_win=TRUE)
team_medals = c(0,0,0)
# Individual All Around: Calculate best 3 individual scores not from our country
# doing what we do with the events would be a speedup here
ind_aa <- other_team_sim %>% filter(Country!=c)%>% filter(Apparatus=="AA")%>%
group_by(Country) %>% # no more than 2 per country
slice_max(sim, n = 2, with_ties = F) %>% ungroup() %>%
slice_max(sim ,n=3,with_ties = F)
# Individual events: Get top 3 individual scores by event (not from country of interest)
top3_event <- other_team_sim %>% filter(Apparatus!="AA")%>% group_by(Country, Apparatus) %>%
slice_max(sim, n = 2, with_ties = F) %>% # no more than 2 per country
ungroup() %>% group_by(Apparatus) %>% slice_max(sim, n = 3, with_ties = F)
# We store the third place value by event (this lets us filter out athletes from our country of interest if they don't score this high)
third_place = (top3_event%>% group_by(Apparatus)%>%slice_min(sim,n=1,with_ties = F))$sim
names(third_place) = (top3_event%>% group_by(Apparatus)%>%slice_min(sim,n=1,with_ties = F))$Apparatus
# Includes athletes from our country,by event, that are larger than the third place we calculated above
# we store their raw place from the standings and their place within the team, these two values together
# can easily allow us to calculate the individual medals for a given combination quickly
event_fin_all = current_team_sim%>% filter(Apparatus!="AA")%>% group_by(Apparatus) %>%
filter(sim>=third_place[Apparatus])%>%arrange(desc(sim))%>%mutate(within_place=row_number()) %>%
ungroup() %>%bind_rows(top3_event)%>%group_by(Apparatus)%>%
arrange(desc(sim))%>%mutate(place=row_number()) %>% filter(Country==c)
# Check each combination and how many medals will come from it
for(j in 1:ncol(comb)){
cur_team_names <- intersect( unlist(comb[j]), team_names)# find which team names are included in this loop
# Team AA:
#if country can't win team medals are 0, otherwise we calculate if we get a medal
if(country_can_win){
team_aa_country = country_aa %>% filter(fullname %in% cur_team_names) %>%
slice_max(sim, n = 3, with_ties = F)%>% summarize(Country = c,composite = sum(sim))%>%rbind(team_comp)%>%
slice_max(composite,n=3,with_ties = F)
team_medals = as.numeric(team_aa_country[1:3,'Country']==c)
}
# Individual AA: determine if our team has any AA winners
ind_aa_country <- country_aa %>% filter(fullname %in% cur_team_names) %>%
slice_max(sim ,n=2,with_ties = F) %>% rbind(ind_aa) %>%
slice_max(sim,n=3,with_ties = F)
# Individual events: determine how each athlete places in the individual events we use the
# raw place and within country place to find this and calculate medals from this
event_fin_country = event_fin_all%>% filter(fullname %in% cur_team_names)%>%
group_by(Apparatus)%>% mutate(difference =
ifelse(!is.na(within_place-lag(within_place)),within_place-lag(within_place)-1,0))%>%
mutate(place=place-difference) %>% filter(place<=3)%>%group_by(place)%>%
summarise(medals = n())%>%arrange(desc(place))%>%as.vector()
ind_medals = event_fin_country$medals
names(ind_medals) = event_fin_country$place
ind_medals= ind_medals[c("1","2","3")]
ind_medals[is.na(ind_medals)] <- 0
medal_scores[j,] <- medal_scores[j,] + c(team_medals,
as.numeric(ind_aa_country[1:3,'Country']==c),
ind_medals)
}
medal_scores
}
# stop cluster
stopCluster(cl)
# output what the number of medals for our score was
print(max(rowSums(medal_scores2))/n)
return(comb[which.max(rowSums(medal_scores2))])
}
random_teams <- women_top5_names %>% group_by(Country) %>% sample_n(5) %>%
left_join(women_df) %>% arrange(FirstName, LastName)
team_roster <- random_teams
tm = Sys.time()
# Loop over countries one by one and go through each combination
for (country in rep(countries_women,2)){
#ptm<-proc.time()
print(country)
#current <- women_top5 %>% filter(Country == country)
current <- women_top5_names %>% filter(Country==country) %>%
left_join(women_df)
other_teams <- team_roster %>% filter(Country != country)
best_team <- team_pick(current, other_teams)
print(as.vector(best_team))
# Update team list with optimal team
team_roster <- rbind(other_teams,
women_df%>% filter(fullname %in% unlist(best_team)))
#print(proc.time()-ptm)
}
print(Sys.time()-tm)
for (country in rep(rev(countries_women),2)){
#ptm<-proc.time()
print(country)
#current <- women_top5 %>% filter(Country == country)
current <- women_top5_names %>% filter(Country==country) %>%
left_join(women_df)
other_teams <- team_roster %>% filter(Country != country)
best_team <- team_pick(current, other_teams)
print(as.vector(best_team))
# Update team list with optimal team
team_roster <- rbind(other_teams,
women_df%>% filter(fullname %in% unlist(best_team)))
#print(proc.time()-ptm)
}
print(Sys.time()-tm)
# Time to pick!
# Initialize teams randomly
random_teams <- men_top5_names %>% group_by(Country) %>% sample_n(5) %>%
left_join(men_df) %>% arrange(FirstName, LastName)
team_roster <- random_teams
men_others
tm = Sys.time()
# Loop over countries one by one and go through each combination
for (country in rep(rev(countries_men), 2)){
print(country)
#current <- men_top5 %>%ungroup() %>%filter(Country == country)
current <- men_top5_names %>% filter(Country==country) %>%
left_join(men_df)
other_teams <- rbind(team_roster %>% filter(Country != country),men_others)
best_team <- team_pick(current, other_teams)
print(best_team)
# Update team list with optimal team
team_roster <- rbind(other_teams,
men_df %>% filter(fullname %in% unlist(best_team)))
}
print(Sys.time()-tm)
# Time to pick!
source('teampick.R')
# Initialize teams randomly
random_teams <- women_top5_names %>% group_by(Country) %>% sample_n(5) %>%
left_join(women_df) %>% arrange(FirstName, LastName)
team_roster <- random_teams
tm = Sys.time()
# Loop over countries one by one and go through each combination
for (country in rep(rev(countries_women),2)){
#ptm<-proc.time()
print(country)
#current <- women_top5 %>% filter(Country == country)
current <- women_top5_names %>% filter(Country==country) %>%
left_join(women_df)
other_teams <- team_roster %>% filter(Country != country)
best_team <- team_pick(current, other_teams)
print(as.vector(best_team))
# Update team list with optimal team
team_roster <- rbind(other_teams,
women_df%>% filter(fullname %in% unlist(best_team)))
#print(proc.time()-ptm)
}
print(Sys.time()-tm)
n<-99 # number of simulations of athletes
# Time to pick!
source('teampick.R')
# Initialize teams randomly
random_teams <- women_top5_names %>% group_by(Country) %>% sample_n(5) %>%
left_join(women_df) %>% arrange(FirstName, LastName)
team_roster <- random_teams
tm = Sys.time()
# Loop over countries one by one and go through each combination
for (country in rep(rev(countries_women),2)){
#ptm<-proc.time()
print(country)
#current <- women_top5 %>% filter(Country == country)
current <- women_top5_names %>% filter(Country==country) %>%
left_join(women_df)
other_teams <- team_roster %>% filter(Country != country)
best_team <- team_pick(current, other_teams)
print(as.vector(best_team))
# Update team list with optimal team
team_roster <- rbind(other_teams,
women_df%>% filter(fullname %in% unlist(best_team)))
#print(proc.time()-ptm)
}
print(Sys.time()-tm)
# Time to pick!
# Initialize teams randomly
random_teams <- men_top5_names %>% group_by(Country) %>% sample_n(5) %>%
left_join(men_df) %>% arrange(FirstName, LastName)
team_roster <- random_teams
men_others
tm = Sys.time()
# Loop over countries one by one and go through each combination
for (country in rep(rev(countries_men), 2)){
print(country)
tm2 = Sys.time()
#current <- men_top5 %>%ungroup() %>%filter(Country == country)
current <- men_top5_names %>% filter(Country==country) %>%
left_join(men_df)
other_teams <- rbind(team_roster %>% filter(Country != country),men_others)
best_team <- team_pick(current, other_teams)
print(best_team)
# Update team list with optimal team
team_roster <- rbind(other_teams,
men_df %>% filter(fullname %in% unlist(best_team)))
print(Sys.time()-tm2)
}
print(Sys.time()-tm)
library("foreach")
library("doParallel")
team_pick <- function(country_df, others_df){
n<-99 # number of simulations of athletes
# Get country name
c <- country_df[1, "Country"] %>% as.character()
# Get all combinations of 5 athletes
comb <- country_df%>%
select(FirstName, LastName) %>%
mutate(name = paste(FirstName, LastName)) %>%
unique() %>% select(name) %>% unlist()%>% combn(5) %>% data.frame()
print(paste("Number of combinations",ncol(comb)))
# get a list of the athlete names from our country
team_names<- country_df %>% select(fullname) %>% unique() %>% unlist()
# The total potential lineup for qualifying, the exact combinations will be filtered later
qual_all <- rbind(country_df, others_df)
# Setting up workers for parallel processing
cl <- makeCluster(detectCores() -1)
registerDoParallel(cl, cores = detectCores() -1)
# looping through each of the simulations in parallel (all combinations are checked)
# for each simulation and stores the number of medals was for each of them
medal_scores2 = foreach(i = 1:n,.packages = c("dplyr"),.combine ="+",.inorder = FALSE)%dopar%{
##############
# NOTE
# Almost all the time of the code is not spent in this part of the loop
# Being a little inefficient is fine here, we want as many useful things
# for later being generated here
##############
medal_scores <- matrix(0,nrow = ncol(comb), ncol = 9)
colnames(medal_scores) <- c('team_g', 'team_s', 'team_b',
'aa_g', 'aa_s', 'aa_b',
'event_g', 'event_s', 'event_b')
# simulate scores for all athletes
qual_all$sim = rnorm(nrow(qual_all), qual_all$avg_score, qual_all$var_score)
# treat the all around like an additional event and add it to the dataframe
qual_all <- bind_rows(qual_all,qual_all%>% group_by(FirstName,LastName,Country,fullname) %>%
summarise(Apparatus = "AA",sim=sum(sim,na.rm = T)))
# Getting rid of unnecessary columns speeds up our code later when slicing data,etc
qual = qual_all %>% select(-c(FirstName,LastName,avg_score,var_score))
# Get simulation scores for other countries and current country of interest
other_team_sim <- qual %>% filter(Country!=c)
current_team_sim <- qual %>% filter(Country==c)
# Team round:
# We calculate the top 3 overall scores for all countries except the current country
# of interest. Choose best 3 for apparatus (Dumb way of picking top 3 for now)
team_comp <- other_team_sim %>% filter(Apparatus=="AA")%>%group_by(Country) %>%
slice_max(sim, n = 3, with_ties = F) %>%group_by(Country)%>% summarize(composite = sum(sim)) %>%
ungroup() %>% slice_max(composite,n=3,with_ties = F)
# Country of interest data frame for the all around
country_aa = current_team_sim%>%filter(Apparatus=="AA")
# We calculate the best score we could possibly have for the all-around, this lets
# us avoid having to find AA scores for each team combination later if its less than the
# third place score from other countries
country_best = country_aa%>%slice_max(sim, n = 3, with_ties = F)%>%select(sim) %>%sum()
country_can_win = as.logical(country_best >= team_comp[3,"composite"])
# Initialise team medals for all-around (updated when country_can_win=TRUE)
team_medals = c(0,0,0)
# Individual All Around: Calculate best 3 individual scores not from our country
# doing what we do with the events would be a speedup here
ind_aa <- other_team_sim %>% filter(Country!=c)%>% filter(Apparatus=="AA")%>%
group_by(Country) %>% # no more than 2 per country
slice_max(sim, n = 2, with_ties = F) %>% ungroup() %>%
slice_max(sim ,n=3,with_ties = F)
# Individual events: Get top 3 individual scores by event (not from country of interest)
top3_event <- other_team_sim %>% filter(Apparatus!="AA")%>% group_by(Country, Apparatus) %>%
slice_max(sim, n = 2, with_ties = F) %>% # no more than 2 per country
ungroup() %>% group_by(Apparatus) %>% slice_max(sim, n = 3, with_ties = F)
# We store the third place value by event (this lets us filter out athletes from our country of interest if they don't score this high)
third_place = (top3_event%>% group_by(Apparatus)%>%slice_min(sim,n=1,with_ties = F))$sim
names(third_place) = (top3_event%>% group_by(Apparatus)%>%slice_min(sim,n=1,with_ties = F))$Apparatus
# Includes athletes from our country,by event, that are larger than the third place we calculated above
# we store their raw place from the standings and their place within the team, these two values together
# can easily allow us to calculate the individual medals for a given combination quickly
event_fin_all = current_team_sim%>% filter(Apparatus!="AA")%>% group_by(Apparatus) %>%
filter(sim>=third_place[Apparatus])%>%arrange(desc(sim))%>%mutate(within_place=row_number()) %>%
ungroup() %>%bind_rows(top3_event)%>%group_by(Apparatus)%>%
arrange(desc(sim))%>%mutate(place=row_number()) %>% filter(Country==c)
# Check each combination and how many medals will come from it
for(j in 1:ncol(comb)){
cur_team_names <- intersect( unlist(comb[j]), team_names)# find which team names are included in this loop
# Team AA:
#if country can't win team medals are 0, otherwise we calculate if we get a medal
if(country_can_win){
team_aa_country = country_aa %>% filter(fullname %in% cur_team_names) %>%
slice_max(sim, n = 3, with_ties = F)%>% summarize(Country = c,composite = sum(sim))%>%rbind(team_comp)%>%
slice_max(composite,n=3,with_ties = F)
team_medals = as.numeric(team_aa_country[1:3,'Country']==c)
}
# Individual AA: determine if our team has any AA winners
ind_aa_country <- country_aa %>% filter(fullname %in% cur_team_names) %>%
slice_max(sim ,n=2,with_ties = F) %>% rbind(ind_aa) %>%
slice_max(sim,n=3,with_ties = F)
# Individual events: determine how each athlete places in the individual events we use the
# raw place and within country place to find this and calculate medals from this
event_fin_country = event_fin_all%>% filter(fullname %in% cur_team_names)%>%
group_by(Apparatus)%>% mutate(difference =
ifelse(!is.na(within_place-lag(within_place)),within_place-lag(within_place)-1,0))%>%
mutate(place=place-difference) %>% filter(place<=3)%>%group_by(place)%>%
summarise(medals = n())%>%arrange(desc(place))%>%as.vector()
ind_medals = event_fin_country$medals
names(ind_medals) = event_fin_country$place
ind_medals= ind_medals[c("1","2","3")]
ind_medals[is.na(ind_medals)] <- 0
medal_scores[j,] <- medal_scores[j,] + c(team_medals,
as.numeric(ind_aa_country[1:3,'Country']==c),
ind_medals)
}
medal_scores
}
# stop cluster
stopCluster(cl)
# output what the number of medals for our score was
if (c == "USA") {
print(medal_scores2)
}
print(max(rowSums(medal_scores2))/n)
return(comb[which.max(rowSums(medal_scores2))])
}
# Time to pick!
source('teampick.R')
# Initialize teams randomly
random_teams <- women_top5_names %>% group_by(Country) %>% sample_n(5) %>%
left_join(women_df) %>% arrange(FirstName, LastName)
team_roster <- random_teams
tm = Sys.time()
# Loop over countries one by one and go through each combination
for (country in rep(rev(countries_women),2)){
#ptm<-proc.time()
print(country)
#current <- women_top5 %>% filter(Country == country)
current <- women_top5_names %>% filter(Country==country) %>%
left_join(women_df)
other_teams <- team_roster %>% filter(Country != country)
best_team <- team_pick(current, other_teams)
print(as.vector(best_team))
# Update team list with optimal team
team_roster <- rbind(other_teams,
women_df%>% filter(fullname %in% unlist(best_team)))
#print(proc.time()-ptm)
}
print(Sys.time()-tm)
source("~/Documents/GitHub/Gymnastics-Case-Study/teampick.R")
