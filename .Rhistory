summarize(across(starts_with("Article"), sum), .groups = "drop")
source("~/Downloads/capstone dispersal plots.R")
View(nbc_combined_df)
nbc_combined_df$total <- apply(nbc_combined_df[,2:ncol(nbc_combined_df)], 1, sum)
nbc_combined_df <- nbc_combined_df %>% select(-article_id)
View(nbc_combined_df)
sort(nbc_combined_df, total)
sort(nbc_combined_df, nbc_combined_df$total)
?sort
nbc_combined_df <- order(nbc_combined_df[total], decreasing=TRUE)
?order
nbc_combined_df <- order(nbc_combined_df, total, decreasing=TRUE)
source("~/Downloads/capstone dispersal plots.R")
source("~/Downloads/capstone dispersal plots.R")
source("~/Downloads/capstone dispersal plots.R")
nbc_dfs <- list()
for (i in 1:length(nbc)) {
words <- nbc_words[nbc_words$article == i,]
nbc_dfs[[i]] <- words %>%
mutate(stem = wordStem(word)) %>%
count(stem, sort=TRUE) %>%
as.data.frame()  # Convert to data frame before storing in the list
names(nbc_dfs[[i]])[2] <- paste("Article", i)
}
# Get all unique stems across all data frames
all_stems <- unique(unlist(lapply(nbc_dfs, function(df) df$stem)))
# Add missing stems with count 0 to each data frame
nbc_dfs_with_missing <- lapply(nbc_dfs, function(df) {
missing_stems <- setdiff(all_stems, df$stem)
if (length(missing_stems) > 0) {
missing_df <- data.frame(stem = missing_stems, count = 0, article_id = rep(NA, length(missing_stems)))
df <- bind_rows(df, missing_df)
}
return(df)
})
# Combine all data frames into a single data frame
nbc_combined_df <- bind_rows(nbc_dfs_with_missing)
# Replace NA values with 0
nbc_combined_df[is.na(nbc_combined_df)] <- 0
nbc_combined_df <- nbc_combined_df %>%
group_by(stem) %>%
summarize(across(starts_with("Article"), sum), .groups = "drop")
nbc_combined_df$total <- apply(nbc_combined_df[,2:ncol(nbc_combined_df)], 1, sum)
nbc_combined_df <- nbc_combined_df %>% select(-article_id)
View(nbc_combined_df)
nbc_combined_df[order(total),]
order(nbc_combined_df$total)
nbc_combined_df[order(nbc_combined_df$total),]
nbc_combined_df[order(nbc_combined_df$total, decreasing = TRUE),]
source("~/Downloads/capstone dispersal plots.R")
View(nbc_combined_df)
nbc_combined_plot <- nbc_combined_df %>% select(-total)
dplot(nbc_combined_plot, xlab = "Variable x", ylab = "Variable y", position = 1, colors = TRUE,
type = "o", mean=TRUE)
source("~/Downloads/capstone dispersal plots.R")
library(ds)
nbc_dfs <- list()
for (i in 1:length(nbc)) {
words <- nbc_words[nbc_words$article == i,]
nbc_dfs[[i]] <- words %>%
mutate(stem = wordStem(word)) %>%
count(stem, sort=TRUE) %>%
as.data.frame()  # Convert to data frame before storing in the list
names(nbc_dfs[[i]])[2] <- paste("Article", i)
}
# Get all unique stems across all data frames
all_stems <- unique(unlist(lapply(nbc_dfs, function(df) df$stem)))
# Add missing stems with count 0 to each data frame
nbc_dfs_with_missing <- lapply(nbc_dfs, function(df) {
missing_stems <- setdiff(all_stems, df$stem)
if (length(missing_stems) > 0) {
missing_df <- data.frame(stem = missing_stems, count = 0, article_id = rep(NA, length(missing_stems)))
df <- bind_rows(df, missing_df)
}
return(df)
})
# Combine all data frames into a single data frame
nbc_combined_df <- bind_rows(nbc_dfs_with_missing)
# Replace NA values with 0
nbc_combined_df[is.na(nbc_combined_df)] <- 0
nbc_combined_df <- nbc_combined_df %>%
group_by(stem) %>%
summarize(across(starts_with("Article"), sum), .groups = "drop")
nbc_combined_df$total <- apply(nbc_combined_df[,2:ncol(nbc_combined_df)], 1, sum)
nbc_combined_df <- nbc_combined_df %>% select(-article_id)
nbc_combined_df <- nbc_combined_df[order(nbc_combined_df$total, decreasing = TRUE),]
nbc_combined_plot <- nbc_combined_df %>% select(-total)
dplot(nbc_combined_plot, xlab = "Variable x", ylab = "Variable y", position = 1, colors = TRUE,
type = "o", mean=TRUE)
View(nbc_combined_plot)
?dplot
# Plotting each row's values across columns as a line graph
matplot(t(nbc_combined_df[-1]), type = "l", xlab = "Columns", ylab = "Value", col = 1:nrow(df))
nbc_combined_df <- nbc_combined_df %>% select(-total)
# Plotting each row's values across columns as a line graph
matplot(t(nbc_combined_df[-1]), type = "l", xlab = "Columns", ylab = "Value", col = 1:nrow(df))
?matplot
source("~/Downloads/capstone dispersal plots.R")
source("~/Downloads/capstone dispersal plots.R")
source("~/Downloads/capstone dispersal plots.R")
nbc_combined_df
source("~/Downloads/capstone dispersal plots.R")
source("~/Downloads/capstone dispersal plots.R")
source("~/Downloads/capstone dispersal plots.R")
# Silencing some annoying messages
options("dplyr.summarise.inform" = F)
countries_men <- c('USA', 'CHN', 'JPN', 'GBR', 'ITA', 'ESP',
'GER', 'CAN', 'TUR', 'SUI', 'NED', 'UKR')
countries_women <- c('USA', 'GBR', 'CAN', 'BRA', 'ITA', 'CHN',
'JPN', 'FRA', 'NED', 'ROU', 'AUS', 'KOR')
men_df <- data_2223 %>%
select(FirstName, LastName, Gender, Country, Apparatus, Score) %>%
drop_na() %>%
filter(Gender == 'm') %>%
group_by(FirstName, LastName, Country, Apparatus) %>%
summarize(avg_score = mean(Score,na.rm=T),
var_score = ifelse(is.na(var(Score)),0,sqrt(var(Score))),
Country=Country[1]) %>%
arrange(var_score) %>%
head(-floor(nrow(.)/15)) %>% mutate(fullname=paste(FirstName,LastName))
source("~/Documents/GitHub/Gymnastics-Case-Study/get.data.r")
setwd()
getwd()
setwd("/Users/davidmetrick/Documents/GitHub/Gymnastics-Case-Study")
# Silencing some annoying messages
options("dplyr.summarise.inform" = F)
countries_men <- c('USA', 'CHN', 'JPN', 'GBR', 'ITA', 'ESP',
'GER', 'CAN', 'TUR', 'SUI', 'NED', 'UKR')
countries_women <- c('USA', 'GBR', 'CAN', 'BRA', 'ITA', 'CHN',
'JPN', 'FRA', 'NED', 'ROU', 'AUS', 'KOR')
men_df <- data_2223 %>%
select(FirstName, LastName, Gender, Country, Apparatus, Score) %>%
drop_na() %>%
filter(Gender == 'm') %>%
group_by(FirstName, LastName, Country, Apparatus) %>%
summarize(avg_score = mean(Score,na.rm=T),
var_score = ifelse(is.na(var(Score)),0,sqrt(var(Score))),
Country=Country[1]) %>%
arrange(var_score) %>%
head(-floor(nrow(.)/15)) %>% mutate(fullname=paste(FirstName,LastName))
source("~/Documents/GitHub/Gymnastics-Case-Study/get.data.r")
# Separate data frames for men and women DONE
# Separate by apparatus DONE
# Remove duplicate rows
# Clean up names to match up athletes
# Clean up apparatus names (VT1 VT_1) DONE
# Separate qualifying & final (or superscore, etc)
# Do basic analysis based on the team
library(dplyr)
library(tidyr)
library(stringi)
library(stringr)
library(lubridate)
data_2223
# Remove spaces from names
data_2223$FirstName <- gsub(" ", "", data_2223$FirstName)
data_2223$LastName <- gsub(" ", "", data_2223$LastName)
#Removing all accents
data_2223$LastName <- stri_trans_general(data_2223$LastName, "Latin-ASCII")
data_2223$FirstName <- stri_trans_general(data_2223$FirstName, "Latin-ASCII")
# Remove non A-Z characters from names
data_2223$FirstName <- gsub("[[:punct:]]", "", data_2223$FirstName)
data_2223$LastName <- gsub("[[:punct:]]", "", data_2223$LastName)
# Split when there are spaces in between first names we are only checking when
# first name and last name and country matches for a person
data_2223 = separate(data_2223, FirstName, into = c("FirstName", "OtherName"),
sep = "^\\S*\\K\\s+")
# Convert all names to upper case
data_2223$FirstName = toupper(data_2223$FirstName)
data_2223$LastName = toupper(data_2223$LastName)
# Rename columns so that the same event is grouped together
data_2223$Apparatus <- gsub("hb", "HB", data_2223$Apparatus)
data_2223$Apparatus <- gsub("VT_1", "VT1", data_2223$Apparatus)
data_2223$Apparatus <- gsub("VT_2", "VT2", data_2223$Apparatus)
data_2223$Apparatus <- gsub("VT1", "VT", data_2223$Apparatus)
data_2223$Apparatus <- gsub("VT2", "VT", data_2223$Apparatus)
# Special cases for country
data_2223$Country <- gsub("CCS", "GUA", data_2223$Country)
data_2223$Country <- gsub("ENG", "GBR", data_2223$Country)
data_2223$Country <- gsub("IOM", "GBR", data_2223$Country)
data_2223$Country <- gsub("JEY", "GBR", data_2223$Country)
data_2223$Country <- gsub("SCO", "GBR", data_2223$Country)
data_2223$Country <- gsub("WAL", "GBR", data_2223$Country)
data_2223$Country <- gsub("GE1", "GER", data_2223$Country)
data_2223$Country <- gsub("GE2", "GER", data_2223$Country)
data_2223$Country <- gsub("NIR", "IRL", data_2223$Country) # come back to this if there are new athletes cause they might not all be IRL
# Special cases for individuals
data_2223$LastName[data_2223$LastName=="ODRISCOL"]="ODRISCOLL"
data_2223 = data_2223 %>%
mutate(FirstName = ifelse(FirstName=="SAM"&LastName=="ZAKUTNEY","SAMUEL",FirstName))
data_2223$outlier <- (data_2223$LastName == "BARBOSA") + (data_2223$FirstName == "JADE")
data_2223[data_2223$outlier == 2,]$Country <- "BRA"
data_2223$outlier <- (data_2223$LastName == "DJORDJEVIC") + (data_2223$FirstName == "DUSAN")
data_2223[data_2223$outlier == 2,]$Country <- "SRB"
# data_2223$outlier <- (data_2223$LastName == "GRÃœNBERG") + (data_2223$FirstName == "JERMAIN")
# data_2223[data_2223$outlier == 2,]$Country <- "NED"
data_2223$outlier <- (data_2223$LastName == "JONASSON") + (data_2223$FirstName == "ARNTHOR")
data_2223[data_2223$outlier == 2,]$Country <- "ISL"
# data_2223$outlier <- (data_2223$LastName == "LIMA") + (data_2223$FirstName == "ANA")
# data_2223[data_2223$outlier == 2,]$Country <- "BRA"
# data_2223$outlier <- (data_2223$LastName == "MEULEMAN") + (data_2223$FirstName == "CASEY-JANE")
# data_2223[data_2223$outlier == 2,]$Country <- "NED"
data_2223$outlier <- (data_2223$LastName == "POGHOSYAN") + (data_2223$FirstName == "MANE")
data_2223[data_2223$outlier == 2,]$Country <- "ARM"
data_2223$outlier <- (data_2223$LastName == "RAPOSO") + (data_2223$FirstName == "CLARA")
data_2223[data_2223$outlier == 2,]$Country <- "CAN"
data_2223$outlier <- (data_2223$LastName == "TOVMASYAN") + (data_2223$FirstName == "ARTUR")
data_2223[data_2223$outlier == 2,]$Country <- "ARM"
data_2223$outlier <- (data_2223$LastName == "ZANETTI") + (data_2223$FirstName == "ARTHUR")
data_2223[data_2223$outlier == 2,]$Country <- "BRA"
# data_2223$outlier <- (data_2223$LastName=="CALLUM") + (data_2223$FirstName=="MC")
# data_2223[data_2223$outlier == 1,]$FirstName <- "GRACE"
# data_2223[data_2223$outlier == 1,]$LastName <- "MCCALLUM"
# data_2223$outlier <- (data_2223$FirstName == "CALLUM") + (data_2223$LastName == "MC")
# data_2223[data_2223$outlier == 2,]$FirstName <- "GRACE"
# data_2223[data_2223$outlier == 2,]$LastName <- "MCCALLUM"
data_2223$outlier <- (data_2223$FirstName == "FREDERICKNATHANIEL")
data_2223[data_2223$outlier == 1,]$FirstName <- "FREDERICK"
data_2223$outlier <- (data_2223$FirstName == "FRED") + (data_2223$LastName == "RICHARD")
data_2223[data_2223$outlier == 2,]$FirstName <- "FREDERICK"
data_2223$outlier <- (data_2223$FirstName == "KHOIALEXANDER") + (data_2223$LastName == "YOUNG")
data_2223[data_2223$outlier == 2,]$FirstName <- "KHOI"
data_2223$outlier <- (data_2223$FirstName == "CURRANMICHAEL") + (data_2223$LastName == "PHILLIPS")
data_2223[data_2223$outlier == 2,]$FirstName <- "CURRAN"
data_2223$outlier <- (data_2223$FirstName == "PAULINE") + (data_2223$LastName == "SCHAFER")
data_2223[data_2223$outlier == 2,]$LastName <- "SCHAEFERBETZ"
data_2223$outlier <- (data_2223$FirstName == "ALEXA") + (data_2223$LastName == "MORENOMEDINA")
data_2223[data_2223$outlier == 2,]$LastName <- "MORENO"
data_2223$outlier <- (data_2223$FirstName == "ALEXACITLALI") + (data_2223$LastName == "MORENOMEDINA")
data_2223[data_2223$outlier == 2,]$FirstName <- "ALEXA"
data_2223[data_2223$outlier == 2,]$LastName <- "MORENO"
data_2223$outlier <- (data_2223$FirstName == "NOESAMUEL") + (data_2223$LastName == "SEIFERT")
data_2223[data_2223$outlier == 2,]$FirstName <- "NOE"
data_2223$outlier <- (data_2223$LastName == "HERONSOTO")
data_2223[data_2223$outlier == 1,]$LastName <- "HERON"
data_2223$outlier <- (data_2223$FirstName == "HILLARYALEXANDRA")
data_2223[data_2223$outlier == 1,]$FirstName<- "HILLARY"
data_2223$outlier <- (data_2223$LastName == "OSYSSEKREIMER")
data_2223[data_2223$outlier == 1,]$LastName<- "OSYSSEK"
data_2223$outlier <- (data_2223$FirstName == "AHTZIRIVIRIDIANA")
data_2223[data_2223$outlier == 1,]$FirstName<- "AHTZIRI"
data_2223$outlier <- (data_2223$FirstName == "ANDREIVASILE")
data_2223[data_2223$outlier == 1,]$FirstName<- "ANDREI"
data_2223$outlier <- (data_2223$FirstName == "CARLOS")+ (data_2223$LastName == "YULO")
data_2223[data_2223$outlier == 2,]$FirstName<- "CARLOSEDRIEL"
data_2223$outlier <- (data_2223$FirstName == "MAX")+ (data_2223$LastName == "WHITLOCKOBE")
data_2223[data_2223$outlier == 2,]$LastName<- "WHITLOCK"
data_2223$outlier <- (data_2223$FirstName == "MCRHYS")+ (data_2223$LastName == "CLENAGHAN")
data_2223[data_2223$outlier == 2,]$LastName<- "MCCLENAGHAN"
data_2223[data_2223$outlier == 2,]$FirstName<- "RHYS"
data_2223$outlier <- (data_2223$FirstName == "CARLO")+ (data_2223$LastName == "HORR")
data_2223[data_2223$outlier == 2,]$LastName<- "HOERR"
data_2223$outlier <- (data_2223$FirstName == "LORANDE")+ (data_2223$LastName == "MUNCK")
data_2223[data_2223$outlier == 2,]$FirstName<- "LORAN"
data_2223[data_2223$outlier == 2,]$LastName<- "DEMUNCK"
data_2223$outlier <- (data_2223$LastName == "MUNCK")
data_2223[data_2223$outlier == 1,]$LastName<- "DEMUNCK"
data_2223$outlier <- (data_2223$FirstName == "DOMINIC")+ (data_2223$LastName == "TAMSEL")
data_2223[data_2223$outlier == 2,]$FirstName<- "DOMINIC"
data_2223$outlier <- (data_2223$FirstName == "MEHMETAYBERK")+ (data_2223$LastName == "KOSAK")
data_2223[data_2223$outlier == 2,]$FirstName<- "MEHMET"
data_2223$outlier <- (data_2223$FirstName == "ELSABETH")+ (data_2223$LastName == "BLACK")
data_2223[data_2223$outlier == 2,]$FirstName<- "ELLIE"
data_2223$outlier <- (data_2223$FirstName == "MELANIEDEJESUSDOS")+ (data_2223$LastName == "SANTOS")
data_2223[data_2223$outlier == 2,]$FirstName<- "MELANIE"
data_2223[data_2223$outlier == 2,]$LastName<- "DEJESUSDOSSANTOS"
data_2223$outlier <- (data_2223$FirstName == "VERA")+ (data_2223$LastName == "POL")
data_2223[data_2223$outlier == 2,]$LastName<- "VANPOL"
data_2223$outlier <- (data_2223$FirstName == "EDOARDODE")+ (data_2223$LastName == "ROSA")
data_2223[data_2223$outlier == 2,]$LastName<- "DEROSA"
data_2223[data_2223$outlier == 2,]$FirstName<- "EDOARDO"
data_2223$outlier <- (data_2223$FirstName == "MARTIJN")+ (data_2223$LastName == "VEER")
data_2223[data_2223$outlier == 2,]$LastName<- "DEVEER"
data_2223 <- subset(data_2223, select = -outlier)
#Remove all duplicated rows
data_2223 = distinct(data_2223)
# Extract start dates and end dates
convertDate <- function(daterange){
daterange = gsub(",","",daterange)
dates = str_split(daterange,"-",simplify = T)
endDate = dmy(trimws(dates[2]))
start = str_split(trimws(dates[1])," ")[[1]]
if(length(start) ==1){
#print(paste(dates[1],format(as.Date(endDate, format="%d-%m-%Y"),"%m-%Y"),sep="-"))
startDate = dmy(paste(dates[1],format(as.Date(endDate, format="%d-%m-%Y"),"%m-%Y"),sep="-"))
}else if(length(start)==2){
startDate = dmy(paste(dates[1],format(as.Date(endDate, format="%d-%m-%Y"),"%Y"),sep="-"))
}else{
startDate = dmy(dates[1])
}
return(c(paste(startDate),paste(endDate)))
}
# Split data by gender
men <- data_2223[data_2223$Gender == "m",]
women <- data_2223[data_2223$Gender == "w",]
# Find athletes with missing countries to fill later by matching with existing athletes
data_2223 = data_2223 %>% group_by(FirstName,LastName) %>%
mutate(Country = sort(Country,decreasing=T)[1])
source("~/Documents/GitHub/Gymnastics-Case-Study/teampick.R")
# Silencing some annoying messages
options("dplyr.summarise.inform" = F)
countries_men <- c('USA', 'CHN', 'JPN', 'GBR', 'ITA', 'ESP',
'GER', 'CAN', 'TUR', 'SUI', 'NED', 'UKR')
countries_women <- c('USA', 'GBR', 'CAN', 'BRA', 'ITA', 'CHN',
'JPN', 'FRA', 'NED', 'ROU', 'AUS', 'KOR')
men_df <- data_2223 %>%
select(FirstName, LastName, Gender, Country, Apparatus, Score) %>%
drop_na() %>%
filter(Gender == 'm') %>%
group_by(FirstName, LastName, Country, Apparatus) %>%
summarize(avg_score = mean(Score,na.rm=T),
var_score = ifelse(is.na(var(Score)),0,sqrt(var(Score))),
Country=Country[1]) %>%
arrange(var_score) %>%
head(-floor(nrow(.)/15)) %>% mutate(fullname=paste(FirstName,LastName))
women_df <- data_2223 %>%
filter(Gender == 'w') %>%
group_by(FirstName, LastName, Country, Apparatus) %>%
summarize(avg_score = mean(Score,na.rm=T),
var_score = ifelse(is.na(var(Score)),0,sqrt(var(Score))),
Country=Country[1]) %>%
arrange(var_score) %>%
head(-floor(nrow(.)/15))%>% mutate(fullname=paste(FirstName,LastName))
women_others_fullnames = c(
"KAYLIA NEMOUR", "PAULINE SCHAEFERBETZ","ALEXA MORENO",
"FILIPA MARTINS","ALEAH FINNEGAN", "BETTINALILI CZIFRA",
"ALBA PETISCO", "ANNA LASHCHEVSKA", "LENA BICKEL",
"HILLARY HERON","CAITLIN ROOSKRANTZ","LIHIE RAZ","LUCIJA HRIBAR",
"CSENGEMARIA BACSKAY","AHTZIRI SANDOVAL","ANA PEREZ", "SARAH VOSS",
"RIFDA IRFANALUTHFI"
)
men_others_fullnames = c(
"MILAD KARIMI", "ARTEM DOLGOPYAT","ARTUR DAVTYAN","KRISZTOFER MESZAROS",
"JUNHO LEE","DIOGO SOARES","LUKA VANDENKEYBUS","ANDREI MUNTEAN",
"CARLOSEDRIEL YULO","RHYS MCCLENAGHAN","ELEFTHERIOS PETROUNIAS",
"KEVIN PENEV","NOAH KUAVITA","TIN SRBIC"
)
men_all_df = data_2223 %>%
select(FirstName, LastName, Gender, Country, Apparatus, Score) %>%
drop_na() %>%
filter(Gender == 'm') %>%
group_by(FirstName, LastName, Country, Apparatus) %>%
summarize(avg_score = mean(Score,na.rm=T),
var_score = ifelse(is.na(var(Score)),0,sqrt(var(Score))),
Country=Country[1]) %>%
arrange(var_score) %>%
mutate(fullname=paste(FirstName,LastName))
men_others = men_all_df %>%
mutate(fullname=paste(FirstName,LastName)) %>%
filter(fullname %in% men_others_fullnames)
men_others =rbind(men_others,
men_all_df%>% group_by(FirstName,LastName,Country) %>%
summarise(Apparatus = "AA",avg_score=sum(avg_score),var_score=0)%>%
mutate(fullname=paste(FirstName,LastName))%>%
filter(!(Country %in% countries_men) & !(fullname %in% men_others_fullnames))%>%
arrange(avg_score)%>%head(36-length(men_others_fullnames))%>% select(FirstName,LastName) %>%left_join(men_all_df)%>%
mutate(fullname=paste(FirstName,LastName)) %>% select(-c("avg_score","var_score"))
)
women_all_df = data_2223 %>%
select(FirstName, LastName, Gender, Country, Apparatus, Score) %>%
drop_na() %>%
filter(Gender == 'w') %>%
group_by(FirstName, LastName, Country, Apparatus) %>%
summarize(avg_score = mean(Score,na.rm=T),
var_score = ifelse(is.na(var(Score)),0,sqrt(var(Score))),
Country=Country[1]) %>%
arrange(var_score) %>%
mutate(fullname=paste(FirstName,LastName))
women_others = women_all_df %>%
mutate(fullname=paste(FirstName,LastName)) %>%
filter(fullname %in% women_others_fullnames)
women_others =rbind(women_others,
women_all_df%>% group_by(FirstName,LastName,Country) %>%
summarise(Apparatus = "AA",avg_score=sum(avg_score),var_score=0)%>%
mutate(fullname=paste(FirstName,LastName))%>%
filter(!(Country %in% countries_women) & !(fullname %in% women_others_fullnames))%>%
arrange(avg_score)%>%head(36-length(women_others_fullnames))%>% select(FirstName,LastName) %>%left_join(women_all_df)%>%
mutate(fullname=paste(FirstName,LastName)) %>% select(-c("avg_score","var_score"))
)
########
men_df_composite_top5 <- men_df%>% group_by(FirstName,LastName,Country) %>%
filter(Country %in% countries_men)%>%
summarise(Apparatus = "AA",avg_score=sum(avg_score),var_score=0) %>%
group_by(Country) %>%slice_max(avg_score,n=3,with_ties = F) %>%
mutate(fullname = paste(FirstName, LastName))
women_df_composite_top5 <- women_df%>%filter(Country %in% countries_women)%>%
group_by(FirstName,LastName,Country) %>%
summarise(Apparatus = "AA",avg_score=sum(avg_score),var_score=0) %>%
group_by(Country) %>%slice_max(avg_score,n=3,with_ties = F) %>%
mutate(fullname = paste(FirstName, LastName))
men_top5 <- men_df %>% filter(Country %in% countries_men)%>%
group_by(Country, Apparatus) %>%
slice_max(avg_score, n = 3, with_ties = F) %>% ungroup() %>%
mutate(fullname = paste(FirstName, LastName))
men_top5_names <- men_top5 %>% rbind(men_df_composite_top5)%>%
select(FirstName, LastName, Country) %>% unique()
women_top5 <- women_df %>%  filter(Country %in% countries_women)%>%
group_by(Country, Apparatus) %>%
slice_max(avg_score, n = 4, with_ties = F)%>% ungroup()%>%
mutate(fullname = paste(FirstName, LastName))
women_top5_names <- women_top5 %>% rbind(women_df_composite_top5)%>%
select(FirstName, LastName, Country) %>% unique()
table(men_top5_names$Country)
table(women_top5_names$Country)
# --------SC-------
# If a combination contains 0 top 1 athletes for any event, exclude it
# we can change this to say how many top 1 athletes we require for a valid
# comb
contains_top_1<-function(comb,country_df,type="men"){
if(type=="men"){
min=1
}else{
min=1
}
top_1s = (country_df %>%group_by(Apparatus)%>%slice_max(avg_score,n=1,with_ties = F)%>%
ungroup()%>%select(fullname) %>% unique())[['fullname']]
return(length(intersect(as.vector(unlist(comb)),top_1s))>=min)
}
set.seed(123)
source('teampick.R')
weights_list <- list(c(0,0,1), c(0,1,0), c(1,0,0), c(0,1,1), c(1,0,1), c(1,1,0), c(0,1,2), c(0,2,1), c(1,0,2), c(1,2,0), c(2,0,1), c(2,1,0), c(1,1,1), c(1,1,2), c(1,2,1), c(2,1,1), c(1,2,2),c(2,1,2), c(2,2,1))
priority_list <- list(c(1,1,1), c(1,0,0), c(3,2,1))
weight_vectors <- list()
index <- 1
for (i in (1:19)) {
for (j in (1:3)) {
weight_vectors[[index]] <- as.vector(outer(priority_list[[j]], weights_list[[i]],"*"))
index <- index + 1
}
}
weight_vectors2 <- weight_vectors[30:57]
# Initialize teams randomly
random_teams <- men_top5_names %>% group_by(Country) %>% sample_n(5) %>%
left_join(men_df) %>% arrange(FirstName, LastName)
team_roster <- random_teams
men_others
tm = Sys.time()
index <- 30
# Loop over countries one by one and go through each combination
for(weight_vector in weight_vectors2){
print(weight_vector)
for (country in rep(rev(countries_men), 2)){
print(c(country,index))
tm2 = Sys.time()
#current <- men_top5 %>%ungroup() %>%filter(Country == country)
current <- men_top5_names %>% filter(Country==country) %>%
left_join(men_df)
other_teams <- rbind(team_roster %>% filter(Country != country),
men_others)
best_team <- team_pick(current, other_teams, weights = weight_vector,
gender='m')
print(best_team)
# Update team list with optimal team
team_roster <- rbind(other_teams,
men_df %>% filter(fullname %in% unlist(best_team)))
print(Sys.time()-tm2)
}
print(Sys.time()-tm)
index <- index + 1
}
# Time to pick!
source('./teampick.R')
# Initialize teams randomly
random_teams <- women_top5_names %>% group_by(Country) %>% sample_n(5) %>%
left_join(women_df) %>% arrange(FirstName, LastName)
team_roster <- random_teams
tm = Sys.time()
index <- 1
# Loop over countries one by one and go through each combination
for(weight_vector in weight_vectors){
for (country in rep(rev(countries_women),2)){
tm2 = Sys.time()
print(c(country,index))
#current <- women_top5 %>% filter(Country == country)
current <- women_top5_names %>% filter(Country==country) %>%
left_join(women_df)
other_teams <- rbind(team_roster %>% filter(Country != country),
women_others)
best_team <- team_pick(current, other_teams, gender='w',
weights = weight_vector)
print(as.vector(best_team))
# Update team list with optimal team
team_roster <- rbind(other_teams,
women_df%>% filter(fullname %in% unlist(best_team)))
print(Sys.time()-tm2)
}
print(Sys.time()-tm)
index <- index + 1
}
library(readr)
scores_1_1_1_1_1_1_1_1_1_USA_w <- read_csv("totsims/scores-1.1.1.1.1.1.1.1.1-USA-w.csv")
View(scores_1_1_1_1_1_1_1_1_1_USA_w)
# read in data_2017_2021.csv
data_1721 <- read.csv('https://raw.githubusercontent.com/ucsas/gym2024data/main/cleandata/data_2017_2021.csv')
# read in data_2022_2023.csv
data_2223 <- read.csv('https://raw.githubusercontent.com/ucsas/gym2024data/main/cleandata/data_2022_2023.csv')
# Separate data frames for men and women DONE
# Separate by apparatus DONE
# Remove duplicate rows
# Clean up names to match up athletes
# Clean up apparatus names (VT1 VT_1) DONE
# Separate qualifying & final (or superscore, etc)
# Do basic analysis based on the team
library(dplyr)
library(tidyr)
library(stringi)
updateR()
library("installR")
library("installr")
install.packages("installr")
library(installr)
updateR()
