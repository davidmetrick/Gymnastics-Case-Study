for (i in 1:10000) {
food$fakegender <- sample(food$Gender)
randomDiff[i] <- mean(na.omit(food$logweight[food$fakegender == 1])) -  mean(na.omit(food$logweight[food$fakegender == 2]))
}
#Make histogram of permuted mean differences
hist(randomDiff, col = "blue", main = "Permuted Sample Mean Diff in logweight", xlab = "log(Weight (lb))", breaks = 50)
abline(v = actualDiff, col="red", lwd=3)
text(actualDiff+.03, 800, paste("Actual Difference =", round(actualDiff,2)), srt = 90)
#Two-sided p-value for difference of means
mean(abs(randomDiff) >= abs(actualDiff))
(test1 <- t.test(logweight ~ Gender, data = food)) # T-test
diffLogWeight <- rep(NA, 10000) # Bootstrap
for (i in 1:10000) {
s1 <- sample(na.omit(food[food$Gender == 1, ]$logweight), replace = TRUE)
s2 <- sample(na.omit(food[food$Gender == 2, ]$logweight), replace = TRUE)
diffLogWeight[i] <- mean(s1) - mean(s2)
}
hist(diffLogWeight, col = "blue", main = "Bootstrapped log means of weight (female - male)", xlab = "log(Weight(lb))", breaks = 50) # Adapted plot from Class_09.Rmd
(ci <- quantile(diffLogWeight, c(0.025, 0.975)))
abline(v = ci, lwd = 3, col = "red")
abline(v = test1$conf.int, lwd = 3, col = "green", lty = 2)
legend("topright", c("Bootstrap CI","Original CI"), lwd = 3, col = c("red","green"), lty = c(1,2), cex = 0.7)
# Permutation test
actualDiff <- mean(na.omit(food$logweight[food$Gender == 1])) -  mean(na.omit(food$logweight[food$Gender == 2]))
randomDiff <- rep(NA, 10000)
for (i in 1:10000) {
food$fakegender <- sample(food$Gender)
randomDiff[i] <- mean(na.omit(food$logweight[food$fakegender == 1])) -  mean(na.omit(food$logweight[food$fakegender == 2]))
}
#Make histogram of permuted mean differences
hist(randomDiff, col = "blue", main = "Permuted Sample Mean Diff in logweight", xlab = "log(Weight (lb))", breaks = 50)
abline(v = actualDiff, col="red", lwd=3)
text(actualDiff+.03, 800, paste("Actual Difference =", round(actualDiff,2)), srt = 90)
#Two-sided p-value for difference of means
mean(abs(randomDiff) >= abs(actualDiff))
(test1 <- t.test(logweight ~ Gender, data = food)) # T-test
diffLogWeight <- rep(NA, 10000) # Bootstrap
for (i in 1:10000) {
s1 <- sample(na.omit(food[food$Gender == 1, ]$logweight), replace = TRUE)
s2 <- sample(na.omit(food[food$Gender == 2, ]$logweight), replace = TRUE)
diffLogWeight[i] <- mean(s1) - mean(s2)
}
hist(diffLogWeight, col = "blue", main = "Bootstrapped log means of weight (female - male)", xlab = "log(Weight(lb))", breaks = 50) # Adapted plot from Class_09.Rmd
(ci <- quantile(diffLogWeight, c(0.025, 0.975)))
abline(v = ci, lwd = 3, col = "red")
abline(v = test1$conf.int, lwd = 3, col = "green", lty = 2)
legend("topright", c("Bootstrap CI","Original CI"), lwd = 3, col = c("red","green"), lty = c(1,2), cex = 0.7)
# Permutation test
actualDiff <- mean(na.omit(food$logweight[food$Gender == 1])) -  mean(na.omit(food$logweight[food$Gender == 2]))
randomDiff <- rep(NA, 10000)
for (i in 1:10000) {
food$fakegender <- sample(food$Gender)
randomDiff[i] <- mean(na.omit(food$logweight[food$fakegender == 1])) -  mean(na.omit(food$logweight[food$fakegender == 2]))
}
#Make histogram of permuted mean differences
hist(randomDiff, col = "blue", main = "Permuted Sample Mean Difference in log(Weight)", xlab = "log(Weight (lb))", breaks = 50)
abline(v = actualDiff, col="red", lwd=3)
text(actualDiff+.03, 800, paste("Actual Difference =", round(actualDiff,2)), srt = 90)
#Two-sided p-value for difference of means
mean(abs(randomDiff) >= abs(actualDiff))
knitr::opts_chunk$set(echo = TRUE)
# reading in the data
food <- read.csv("~/Downloads/archive/food_coded.csv")
food <- food[, c("GPA", "Gender", "breakfast", "calories_day", "comfort_food", "comfort_food_reasons", "exercise", "weight", "father_education")]
dim(food)
# cleaning GPA
food$GPA <- as.numeric(gsub("[[:alpha:]]", "", food$GPA))
food$GPA <- round(food$GPA, 2)
# cleaning Calories a Day-- all 1's are missing so replace NaN with 1
food$calories_day[is.na(food$calories_day)] <- 1
# cleaning Comfort Food-- using first food listed
food$comfort_food <- gsub(",.*", "", food$comfort_food)
# change to all lowercase
food$comfort_food <- tolower(food$comfort_food)
# remove \n, -
food$comfort_food <- gsub("\npop.*", "", food$comfort_food)
food$comfort_food <- gsub("-", " ", food$comfort_food)
# group chips, mac and cheese
food$comfort_food <- gsub("chex mix|doritos|chips and dip|chips sweets popcorn|popcorn|potato chips", "chips", food$comfort_food)
food$comfort_food <- gsub("mac & cheese|mac in cheese|mac n cheese.*|macaroni and cheese", "mac and cheese", food$comfort_food)
# remove non-word characters
food$comfort_food <- gsub("\\W .*", "", food$comfort_food)
# group candy, pizza, pasta, fast food, vegetables
food$comfort_food <- gsub(".*chocolate.*", "candy", food$comfort_food)
food$comfort_food <- gsub("pizza.*", "pizza", food$comfort_food)
food$comfort_food <- gsub("pasta.*|noodle ", "pasta", food$comfort_food)
food$comfort_food <- gsub("burger.*|chicken fingers|fried chicken|fries|french fries", "fast food", food$comfort_food)
food$comfort_food <- gsub("broccoli|carrots.*|mashed potatoes|watermelon", "vegetables", food$comfort_food)
searchvec1 <- c("frozen yogurt", "tomato soup", "macaroons")
replacevec1 <- c("ice cream", "soup", "cookies")
for (i in 1:length(searchvec1)){
food$comfort_food <- gsub(paste0(".*", searchvec1[i] ,".*"), replacevec1[i], food$comfort_food)
}
food$comfort_food <- gsub("cake|chilli|donuts|little debbie snacks|nan|none|peanut butter.*|rice|saltfish|snacks|wine|chinese|pasta|soup|.*chinese.*", "other", food$comfort_food)
sort(table(food$comfort_food), decreasing = T)
# cleaning comfort food reasons
# formatting
food$comfort_food_reasons <- gsub(",.*", "", food$comfort_food_reasons)
food$comfort_food_reasons <- tolower(food$comfort_food_reasons)
food$comfort_food_reasons <- trimws(food$comfort_food_reasons)
# grouping by reason
food$comfort_food_reasons <- gsub(".*stressed.*|stress.*|mostly stress|stres|anxiousness|anger", "stress", food$comfort_food_reasons)
food$comfort_food_reasons <- gsub(".*boredom.*|.*bored.*|bordem", "boredom", food$comfort_food_reasons)
food$comfort_food_reasons <- gsub(".*sadness.*|depression|.*sad.*|loneliness", "sadness", food$comfort_food_reasons)
food$comfort_food_reasons <- gsub(".*laziness.*|lazy|tired", "laziness", food$comfort_food_reasons)
food$comfort_food_reasons <- gsub("no reasons.*|just cause.*", "none", food$comfort_food_reasons)
# grouping other
food$comfort_food_reasons <- gsub("hormones|hunger|nan|.*comfort.*|survival|.*yummy.*|.*taste.*|.*friends.*|.*day|none", "other", food$comfort_food_reasons)
sort(table(food$comfort_food_reasons), decreasing = T)
# cleaning exercise
food$exercise[is.na(food$exercise)] <- NA
# cleaning weight
food$weight <- gsub("[^[:digit:]]", "", food$weight)
food$weight <- as.numeric(food$weight)
food$weight[food$weight == ""] <- NA
# cleaning Father's education level
food$father_education[is.na(food$father_education)] <- NA
boxplot(food$weight ~ food$breakfast, col = "yellow", main = "Weight by Breakfast Preference", ylab = "Weight (lbs)", xlab = "Breakfast (1 = cereal; 2 = donut)")
boxplot(food$weight ~ food$comfort_food_reasons, col = rainbow(6), main = "Weight by Comfort Food Reason", ylab = "Weight (lbs)", xlab = "Comfort Food Reason")
boxplot(food$weight ~ food$comfort_food, las = 2, main = "Weight by Comfort Food", ylab = "Weight (lbs)", xlab = "Comfort Food", col = rainbow(6))
boxplot(food$weight ~ food$father_education, main = "Weight by Father Education", ylab = "Weight (lbs)", xlab = "Father Education (increasing level from 1-5)", col = "orange")
plot(food$GPA, food$weight, pch = 19, main = "Weight by GPA", ylab = "Weight (lbs)", xlab = "GPA", col = "blue")
hist(food$weight, main = "Histogram of Weight (lbs)", xlab = "Weight (lbs)", col = "blue")
# looks like a log transformation may be useful here-- right-skewed
food$logweight <- log(food$weight)
hist(food$logweight, main = "Histogram of log(Weight)", xlab = "Weight (log)", col = "blue")
library(car)
qqPlot(food$weight, pch = 19)
qqPlot(food$logweight, pch = 19)
help(plot)
(test1 <- t.test(logweight ~ Gender, data = food)) # T-test
diffLogWeight <- rep(NA, 10000) # Bootstrap
for (i in 1:10000) {
s1 <- sample(na.omit(food[food$Gender == 1, ]$logweight), replace = TRUE)
s2 <- sample(na.omit(food[food$Gender == 2, ]$logweight), replace = TRUE)
diffLogWeight[i] <- mean(s1) - mean(s2)
}
hist(diffLogWeight, col = "blue", main = "Bootstrapped log means of weight (female - male)", xlab = "log(Weight(lb))", breaks = 50) # Adapted plot from Class_09.Rmd
(ci <- quantile(diffLogWeight, c(0.025, 0.975)))
abline(v = ci, lwd = 3, col = "red")
abline(v = test1$conf.int, lwd = 3, col = "green", lty = 2)
legend("topright", c("Bootstrap CI","Original CI"), lwd = 3, col = c("red","green"), lty = c(1,2), cex = 0.7)
# Permutation test
actualDiff <- mean(na.omit(food$logweight[food$Gender == 1])) -  mean(na.omit(food$logweight[food$Gender == 2]))
randomDiff <- rep(NA, 10000)
for (i in 1:10000) {
food$fakegender <- sample(food$Gender)
randomDiff[i] <- mean(na.omit(food$logweight[food$fakegender == 1])) -  mean(na.omit(food$logweight[food$fakegender == 2]))
}
#Make histogram of permuted mean differences
hist(randomDiff, col = "blue", main = "Permuted Sample Mean Difference in log(Weight)", xlab = "log(Weight (lb))", breaks = 50, xlim = c(-0.25, 0.25))
abline(v = actualDiff, col="red", lwd=3)
text(actualDiff+.03, 800, paste("Actual Difference =", round(actualDiff,2)), srt = 90)
#Two-sided p-value for difference of means
mean(abs(randomDiff) >= abs(actualDiff))
(test1 <- t.test(logweight ~ Gender, data = food)) # T-test
diffLogWeight <- rep(NA, 10000) # Bootstrap
for (i in 1:10000) {
s1 <- sample(na.omit(food[food$Gender == 1, ]$logweight), replace = TRUE)
s2 <- sample(na.omit(food[food$Gender == 2, ]$logweight), replace = TRUE)
diffLogWeight[i] <- mean(s1) - mean(s2)
}
hist(diffLogWeight, col = "blue", main = "Bootstrapped log means of weight (female - male)", xlab = "log(Weight(lb))", breaks = 50) # Adapted plot from Class_09.Rmd
(ci <- quantile(diffLogWeight, c(0.025, 0.975)))
abline(v = ci, lwd = 3, col = "red")
abline(v = test1$conf.int, lwd = 3, col = "green", lty = 2)
legend("topright", c("Bootstrap CI","Original CI"), lwd = 3, col = c("red","green"), lty = c(1,2), cex = 0.7)
# Permutation test
actualDiff <- mean(na.omit(food$logweight[food$Gender == 1])) -  mean(na.omit(food$logweight[food$Gender == 2]))
randomDiff <- rep(NA, 10000)
for (i in 1:10000) {
food$fakegender <- sample(food$Gender)
randomDiff[i] <- mean(na.omit(food$logweight[food$fakegender == 1])) -  mean(na.omit(food$logweight[food$fakegender == 2]))
}
#Make histogram of permuted mean differences
hist(randomDiff, col = "blue", main = "Permuted Sample Mean Difference in log(Weight)", xlab = "log(Weight (lb))", breaks = 50, xlim = c(-0.25, 0.25))
abline(v = actualDiff, col="red", lwd=3)
text(actualDiff-.03, 800, paste("Actual Difference =", round(actualDiff,2)), srt = 90)
#Two-sided p-value for difference of means
mean(abs(randomDiff) >= abs(actualDiff))
(test1 <- t.test(logweight ~ Gender, data = food)) # T-test
diffLogWeight <- rep(NA, 10000) # Bootstrap
for (i in 1:10000) {
s1 <- sample(na.omit(food[food$Gender == 1, ]$logweight), replace = TRUE)
s2 <- sample(na.omit(food[food$Gender == 2, ]$logweight), replace = TRUE)
diffLogWeight[i] <- mean(s1) - mean(s2)
}
hist(diffLogWeight, col = "blue", main = "Bootstrapped log means of weight (female - male)", xlab = "log(Weight(lb))", breaks = 50) # Adapted plot from Class_09.Rmd
(ci <- quantile(diffLogWeight, c(0.025, 0.975)))
abline(v = ci, lwd = 3, col = "red")
abline(v = test1$conf.int, lwd = 3, col = "green", lty = 2)
legend("topright", c("Bootstrap CI","Original CI"), lwd = 3, col = c("red","green"), lty = c(1,2), cex = 0.7)
# Permutation test
actualDiff <- mean(na.omit(food$logweight[food$Gender == 1])) -  mean(na.omit(food$logweight[food$Gender == 2]))
randomDiff <- rep(NA, 10000)
for (i in 1:10000) {
food$fakegender <- sample(food$Gender)
randomDiff[i] <- mean(na.omit(food$logweight[food$fakegender == 1])) -  mean(na.omit(food$logweight[food$fakegender == 2]))
}
#Make histogram of permuted mean differences
hist(randomDiff, col = "blue", main = "Permuted Sample Mean Difference in log(Weight)", xlab = "log(Weight (lb))", breaks = 50, xlim = c(-0.25, 0.25))
abline(v = actualDiff, col="red", lwd=3)
text(actualDiff-.03, 100, paste("Actual Difference =", round(actualDiff,2)), srt = 90)
#Two-sided p-value for difference of means
mean(abs(randomDiff) >= abs(actualDiff))
(test1 <- t.test(logweight ~ Gender, data = food)) # T-test
diffLogWeight <- rep(NA, 10000) # Bootstrap
for (i in 1:10000) {
s1 <- sample(na.omit(food[food$Gender == 1, ]$logweight), replace = TRUE)
s2 <- sample(na.omit(food[food$Gender == 2, ]$logweight), replace = TRUE)
diffLogWeight[i] <- mean(s1) - mean(s2)
}
hist(diffLogWeight, col = "blue", main = "Bootstrapped log means of weight (female - male)", xlab = "log(Weight(lb))", breaks = 50) # Adapted plot from Class_09.Rmd
(ci <- quantile(diffLogWeight, c(0.025, 0.975)))
abline(v = ci, lwd = 3, col = "red")
abline(v = test1$conf.int, lwd = 3, col = "green", lty = 2)
legend("topright", c("Bootstrap CI","Original CI"), lwd = 3, col = c("red","green"), lty = c(1,2), cex = 0.7)
# Permutation test
actualDiff <- mean(na.omit(food$logweight[food$Gender == 1])) -  mean(na.omit(food$logweight[food$Gender == 2]))
randomDiff <- rep(NA, 10000)
for (i in 1:10000) {
food$fakegender <- sample(food$Gender)
randomDiff[i] <- mean(na.omit(food$logweight[food$fakegender == 1])) -  mean(na.omit(food$logweight[food$fakegender == 2]))
}
#Make histogram of permuted mean differences
hist(randomDiff, col = "blue", main = "Permuted Sample Mean Difference in log(Weight)", xlab = "log(Weight (lb))", breaks = 50, xlim = c(-0.25, 0.25))
abline(v = actualDiff, col="red", lwd=3)
text(actualDiff-.03, 500, paste("Actual Difference =", round(actualDiff,2)), srt = 90)
#Two-sided p-value for difference of means
mean(abs(randomDiff) >= abs(actualDiff))
(test1 <- t.test(logweight ~ Gender, data = food)) # T-test
diffLogWeight <- rep(NA, 10000) # Bootstrap
for (i in 1:10000) {
s1 <- sample(na.omit(food[food$Gender == 1, ]$logweight), replace = TRUE)
s2 <- sample(na.omit(food[food$Gender == 2, ]$logweight), replace = TRUE)
diffLogWeight[i] <- mean(s1) - mean(s2)
}
hist(diffLogWeight, col = "blue", main = "Bootstrapped log means of weight (female - male)", xlab = "log(Weight(lb))", breaks = 50) # Adapted plot from Class_09.Rmd
(ci <- quantile(diffLogWeight, c(0.025, 0.975)))
abline(v = ci, lwd = 3, col = "red")
abline(v = test1$conf.int, lwd = 3, col = "green", lty = 2)
legend("topright", c("Bootstrap CI","Original CI"), lwd = 3, col = c("red","green"), lty = c(1,2), cex = 0.7)
# Permutation test
actualDiff <- mean(na.omit(food$logweight[food$Gender == 1])) -  mean(na.omit(food$logweight[food$Gender == 2]))
randomDiff <- rep(NA, 10000)
for (i in 1:10000) {
food$fakegender <- sample(food$Gender)
randomDiff[i] <- mean(na.omit(food$logweight[food$fakegender == 1])) -  mean(na.omit(food$logweight[food$fakegender == 2]))
}
#Make histogram of permuted mean differences
hist(randomDiff, col = "blue", main = "Permuted Sample Mean Difference in log(Weight)", xlab = "log(Weight (lb))", breaks = 50, xlim = c(-0.25, 0.25))
abline(v = actualDiff, col="red", lwd=3)
text(actualDiff-.03, 300, paste("Actual Difference =", round(actualDiff,2)), srt = 90)
#Two-sided p-value for difference of means
mean(abs(randomDiff) >= abs(actualDiff))
df <- read.csv("https://github.com/ucsas/gym2024data/blob/main/cleandata/data_2022_2023.csv")
# read in data_2017_2021.csv
data_1721 <- read.csv('https://raw.githubusercontent.com/ucsas/gym2024data/main/cleandata/data_2017_2021.csv')
# read in data_2022_2023.csv
data_2223 <- read.csv('https://raw.githubusercontent.com/ucsas/gym2024data/main/cleandata/data_2022_2023.csv')
data_2223
men <- data_2223[data_2223$Gender == "m",]
women <- data_2223[data_2223$Gender == "w",]
men
unique(men$Apparatus)
unique(women$Apparatus)
men[men$Apparatus == "VT",]
men[men$Apparatus == "VT",]$Round
unique(men[men$Apparatus == "VT",]$Round)
unique(men[men$Apparatus == "VT1",]$Round)
unique(women[women$Apparatus == "VT1",]$Round)
unique(women[women$Apparatus == "VT",]$Round)
unique(women[women$Apparatus == "VT2",]$Round)
unique(men$Apparatus)
unique(women$Apparatus)
data_2223
data_2223 <- gsub("hb", "HB", data_2223)
data_2223 <- gsub("VT_1", "VT1", data_2223)
data_2223 <- gsub("VT_2", "VT2", data_2223)
men <- data_2223[data_2223$Gender == "m",]
women <- data_2223[data_2223$Gender == "w",]
# read in data_2017_2021.csv
data_1721 <- read.csv('https://raw.githubusercontent.com/ucsas/gym2024data/main/cleandata/data_2017_2021.csv')
# read in data_2022_2023.csv
data_2223 <- read.csv('https://raw.githubusercontent.com/ucsas/gym2024data/main/cleandata/data_2022_2023.csv')
data_2223
data_2223$Apparatus <- gsub("hb", "HB", data_2223$Apparatus)
data_2223$Apparatus <- gsub("VT_1", "VT1", data_2223$Apparatus)
data_2223$Apparatus <- gsub("VT_2", "VT2", data_2223$Apparatus)
men <- data_2223[data_2223$Gender == "m",]
women <- data_2223[data_2223$Gender == "w",]
unique(men$Apparatus)
men$HB
men[men$Apparatus == "HB",]
unique(men$Apparatus)
unique(women$Apparatus)
unique(women[women$Apparatus == "VT",]$Round)
unique(men[men$Apparatus == "VT",]$Round)
hb <- men[men$Apparatus == "HB",]
ph <- men[men$Apparatus == "PH",]
fx_m <- men[men$Apparatus == "FX",]
pb <- men[men$Apparatus == "PB",]
sr <- men[men$Apparatus == "SR",]
vt1_m <- men[men$Apparatus == "VT1",]
vt2_m <- men[men$Apparatus == "VT2",]
vt_m <- men[men$Apparatus == "VT",]
bb <- women[women$Apparatus == "BB",]
fx_w <- women[women$Apparatus == "FX",]
ub <- women[women$Apparatus == "UB",]
vt1_w <- women[women$Apparatus == "VT1",]
vt2_w <- women[womenApparatus == "VT2",]
vt_w <- women[women$Apparatus == "VT",]
vt2_w <- women[women$Apparatus == "VT2",]
vt_w <- women[women$Apparatus == "VT",]
unique(bb$LastName)
bb
unique(bb$Competition)
bb[bb$Country == "USA",]
ph[ph$Country == "USA",]
vt_m
plot(vt_m$D_Score, vt_m$E_Score)
plot(data_2223$D_Score, data_2223$E_Score)
plot(data_2223$D_Score, data_2223$E_Score, pch=19)
plot(bb$D_Score, bb$E_Score, pch=19)
cor(bb$D_Score, bb$E_Score)
?cor
unique(vt_w$LastName)
vt_w[vt_w$LastName == "ZHU"]
vt_w[vt_w$LastName == "ZHU",]
bb
# Separate data frames for men and women DONE
# Separate by apparatus DONE
# Remove duplicate rows
# Clean up names to match up athletes
# Clean up apparatus names (VT1 VT_1) DONE
# Separate qualifying & final (or superscore, etc)
# Do basic analysis based on the team
library(dplyr)
data_2223
# Convert all names to upper case
data_2223$FirstName = toupper(data_2223$FirstName)
data_2223$LastName = toupper(data_2223$LastName)
# Rename columns so that the same event is grouped together
data_2223$Apparatus <- gsub("hb", "HB", data_2223$Apparatus)
data_2223$Apparatus <- gsub("VT_1", "VT1", data_2223$Apparatus)
data_2223$Apparatus <- gsub("VT_2", "VT2", data_2223$Apparatus)
# Split data by gender
men <- data_2223[data_2223$Gender == "m",]
women <- data_2223[data_2223$Gender == "w",]
# Further split data by event (so split is now by event by gender)
apparatus_men = sort(unique(men$Apparatus))
apparatus_group_men = men %>% group_by(Apparatus)
events_m = group_split(apparatus_group_men)
for(event in events_m){
assign(paste(event$Apparatus[1],"m",sep="_"), event)
}
apparatus_women = sort(unique(women$Apparatus))
apparatus_group_women = women %>% group_by(Apparatus)
events_w = group_split(apparatus_group_women)
for(event in events_w){
assign(paste(event$Apparatus[1],"w",sep="_"), event)
}
# the names of the events for the different genders, we access the event data
# by gender by indicating the event and gender e.g. 'VT_w'
apparatus_men
apparatus_women
unique(data_2223$Country)
data_2223[data_2223$Country == "",]
data_2223[data_2223$LastName == "AKHMEJANOV",]
unique(data_2223$Country)
data_2223[data_2223$Country == "GE2",]
unique(data_2223$Country)
data_2223[data_2223$Country == "IOM",]
data_2223[data_2223$Country == "CCS",]
max(data_2223$Score)
unique(data_2223$Score)
sort(data_2223$Score, descending=True)
sort(data_2223$Score, descending=RUE)
sort(data_2223$Score, descending=TRUE)
sort(data_2223$Score, decreasing=TRUE)
# Separate data frames for men and women DONE
# Separate by apparatus DONE
# Remove duplicate rows
# Clean up names to match up athletes
# Clean up apparatus names (VT1 VT_1) DONE
# Separate qualifying & final (or superscore, etc)
# Do basic analysis based on the team
library(dplyr)
data_2223
# Convert all names to upper case
data_2223$FirstName = toupper(data_2223$FirstName)
data_2223$LastName = toupper(data_2223$LastName)
# Rename columns so that the same event is grouped together
data_2223$Apparatus <- gsub("hb", "HB", data_2223$Apparatus)
data_2223$Apparatus <- gsub("VT_1", "VT1", data_2223$Apparatus)
data_2223$Apparatus <- gsub("VT_2", "VT2", data_2223$Apparatus)
data_2223$Country <- gsub("CCS", "GUA", data_2223$Country)
data_2223$Country <- gsub("ENG", "GBR", data_2223$Country)
data_2223$Country <- gsub("IOM", "GBR", data_2223$Country)
data_2223$Country <- gsub("JEY", "GBR", data_2223$Country)
data_2223$Country <- gsub("SCO", "GBR", data_2223$Country)
data_2223$Country <- gsub("WAL", "GBR", data_2223$Country)
data_2223$Country <- gsub("GE1", "GER", data_2223$Country)
data_2223$Country <- gsub("GE2", "GER", data_2223$Country)
# Split data by gender
men <- data_2223[data_2223$Gender == "m",]
women <- data_2223[data_2223$Gender == "w",]
# Further split data by event (so split is now by event by gender)
apparatus_men = sort(unique(men$Apparatus))
apparatus_group_men = men %>% group_by(Apparatus)
events_m = group_split(apparatus_group_men)
for(event in events_m){
assign(paste(event$Apparatus[1],"m",sep="_"), event)
}
apparatus_women = sort(unique(women$Apparatus))
apparatus_group_women = women %>% group_by(Apparatus)
events_w = group_split(apparatus_group_women)
for(event in events_w){
assign(paste(event$Apparatus[1],"w",sep="_"), event)
}
# the names of the events for the different genders, we access the event data
# by gender by indicating the event and gender e.g. 'VT_w'
apparatus_men
apparatus_women
unique(data_2223$Country)
data_2223[data_2223$Country == "NIR",]
data_2223[data_2223$LastName == "ATEER",]
data_2223[data_2223$LastName == "CLENAGHAN",]
data_2223[data_2223$LastName == "MONTGOMERY",]
data_2223$Country <- gsub("NIR", "IRL", data_2223$Country)
data_2223[data_2223$Country == "",]
unique(data_2223[data_2223$Country == "",]$LastName)
# the names of the events for the different genders, we access the event data
# by gender by indicating the event and gender e.g. 'VT_w'
apparatus_men
apparatus_women
# Find athletes with missing countries to fill later
m <- (data_2223 %>% filter(Country == ''))$LastName %>% unique()
data_2223 %>% filter(LastName %in% m) %>% select(LastName, FirstName, Country) %>%
unique() %>% arrange(LastName)
unique(data_2223$Country)
data_2223[data_2223$Country == "",]
data_2223 %>% filter(LastName %in% m) %>% select(LastName, FirstName, Country) %>%
unique() %>% arrange(LastName)
data_2223[data_2223$Country == "",]
# Find athletes with missing countries to fill later by matching with existing athletes
data_2223 = data_2223 %>% group_by(FirstName,LastName) %>% mutate(Country = sort(Country,decreasing=T)[1])
m <- (data_2223 %>% filter(Country == ''))$LastName %>% unique()
View(data_2223 %>% filter(LastName %in% m) %>% select(LastName, FirstName, Country) %>%
unique() %>% arrange(LastName))
data_2223 %>% filter(LastName %in% m) %>% select(LastName, FirstName, Country) %>%
unique() %>% arrange(LastName)
# Separate data frames for men and women DONE
# Separate by apparatus DONE
# Remove duplicate rows
# Clean up names to match up athletes
# Clean up apparatus names (VT1 VT_1) DONE
# Separate qualifying & final (or superscore, etc)
# Do basic analysis based on the team
library(dplyr)
library(tidyr)
library(stringi)
data_2223
# Split when there are spaces in between first names we are only checking when
# first name and last name and country matches for a person
data_2223 = separate(data_2223, FirstName, into = c("FirstName", "OtherName"),
sep = "^\\S*\\K\\s+")
#Removing all accents
apply(data_2223,2,function(x) stringi::stri_trans_general(x, "Latin-ASCII") )
# Convert all names to upper case
data_2223$FirstName = toupper(data_2223$FirstName)
data_2223$LastName = toupper(data_2223$LastName)
# Rename columns so that the same event is grouped together
data_2223$Apparatus <- gsub("hb", "HB", data_2223$Apparatus)
data_2223$Apparatus <- gsub("VT_1", "VT1", data_2223$Apparatus)
data_2223$Apparatus <- gsub("VT_2", "VT2", data_2223$Apparatus)
data_2223$Country <- gsub("CCS", "GUA", data_2223$Country)
data_2223$Country <- gsub("ENG", "GBR", data_2223$Country)
data_2223$Country <- gsub("IOM", "GBR", data_2223$Country)
data_2223$Country <- gsub("JEY", "GBR", data_2223$Country)
data_2223$Country <- gsub("SCO", "GBR", data_2223$Country)
data_2223$Country <- gsub("WAL", "GBR", data_2223$Country)
data_2223$Country <- gsub("GE1", "GER", data_2223$Country)
data_2223$Country <- gsub("GE2", "GER", data_2223$Country)
data_2223$Country <- gsub("NIR", "IRL", data_2223$Country) # come back to this if there are new athletes cause they might not all be IRL
#Remove all duplicated rows
data_2223 = distinct(data_2223)
# Split data by gender
men <- data_2223[data_2223$Gender == "m",]
women <- data_2223[data_2223$Gender == "w",]
# Further split data by event (so split is now by event by gender)
apparatus_men = sort(unique(men$Apparatus))
apparatus_group_men = men %>% group_by(Apparatus)
events_m = group_split(apparatus_group_men)
for(event in events_m){
assign(paste(event$Apparatus[1],"m",sep="_"), event)
}
apparatus_women = sort(unique(women$Apparatus))
apparatus_group_women = women %>% group_by(Apparatus)
events_w = group_split(apparatus_group_women)
for(event in events_w){
assign(paste(event$Apparatus[1],"w",sep="_"), event)
}
# the names of the events for the different genders, we access the event data
# by gender by indicating the event and gender e.g. 'VT_w'
apparatus_men
apparatus_women
# Find athletes with missing countries to fill later by matching with existing athletes
data_2223 = data_2223 %>% group_by(FirstName,LastName) %>% mutate(Country = sort(Country,decreasing=T)[1])
m <- (data_2223 %>% filter(Country == ''))$LastName %>% unique()
data_2223 %>% filter(LastName %in% m) %>% select(LastName, FirstName, Country) %>%
unique() %>% arrange(LastName)
