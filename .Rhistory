# data_2223$outlier <- (data_2223$LastName == "GRÜNBERG") + (data_2223$FirstName == "JERMAIN")
# data_2223[data_2223$outlier == 2,]$Country <- "NED"
data_2223$outlier <- (data_2223$LastName == "JONASSON") + (data_2223$FirstName == "ARNTHOR")
data_2223[data_2223$outlier == 2,]$Country <- "ISL"
# data_2223$outlier <- (data_2223$LastName == "LIMA") + (data_2223$FirstName == "ANA")
# data_2223[data_2223$outlier == 2,]$Country <- "BRA"
# data_2223$outlier <- (data_2223$LastName == "MEULEMAN") + (data_2223$FirstName == "CASEY-JANE")
# data_2223[data_2223$outlier == 2,]$Country <- "NED"
data_2223$outlier <- (data_2223$LastName == "POGHOSYAN") + (data_2223$FirstName == "MANE")
data_2223[data_2223$outlier == 2,]$Country <- "ARM"
data_2223$outlier <- (data_2223$LastName == "RAPOSO") + (data_2223$FirstName == "CLARA")
data_2223[data_2223$outlier == 2,]$Country <- "CAN"
data_2223$outlier <- (data_2223$LastName == "TOVMASYAN") + (data_2223$FirstName == "ARTUR")
data_2223[data_2223$outlier == 2,]$Country <- "ARM"
data_2223$outlier <- (data_2223$LastName == "ZANETTI") + (data_2223$FirstName == "ARTHUR")
data_2223[data_2223$outlier == 2,]$Country <- "BRA"
# data_2223$outlier <- (data_2223$LastName=="CALLUM") + (data_2223$FirstName=="MC")
# data_2223[data_2223$outlier == 1,]$FirstName <- "GRACE"
# data_2223[data_2223$outlier == 1,]$LastName <- "MCCALLUM"
# data_2223$outlier <- (data_2223$FirstName == "CALLUM") + (data_2223$LastName == "MC")
# data_2223[data_2223$outlier == 2,]$FirstName <- "GRACE"
# data_2223[data_2223$outlier == 2,]$LastName <- "MCCALLUM"
data_2223$outlier <- (data_2223$FirstName == "FREDERICKNATHANIEL")
data_2223[data_2223$outlier == 1,]$FirstName <- "FREDERICK"
data_2223$outlier <- (data_2223$FirstName == "FRED") + (data_2223$LastName == "RICHARD")
data_2223[data_2223$outlier == 2,]$FirstName <- "FREDERICK"
data_2223$outlier <- (data_2223$FirstName == "KHOIALEXANDER") + (data_2223$LastName == "YOUNG")
data_2223[data_2223$outlier == 2,]$FirstName <- "KHOI"
data_2223$outlier <- (data_2223$FirstName == "CURRANMICHAEL") + (data_2223$LastName == "PHILLIPS")
data_2223[data_2223$outlier == 2,]$FirstName <- "CURRAN"
data_2223$outlier <- (data_2223$FirstName == "PAULINE") + (data_2223$LastName == "SCHAFER")
data_2223[data_2223$outlier == 2,]$LastName <- "SCHAEFERBETZ"
data_2223$outlier <- (data_2223$FirstName == "ALEXA") + (data_2223$LastName == "MORENOMEDINA")
data_2223[data_2223$outlier == 2,]$LastName <- "MORENO"
data_2223$outlier <- (data_2223$FirstName == "ALEXACITLALI") + (data_2223$LastName == "MORENOMEDINA")
data_2223[data_2223$outlier == 2,]$FirstName <- "ALEXA"
data_2223[data_2223$outlier == 2,]$LastName <- "MORENO"
data_2223$outlier <- (data_2223$FirstName == "NOESAMUEL") + (data_2223$LastName == "SEIFERT")
data_2223[data_2223$outlier == 2,]$FirstName <- "NOE"
data_2223$outlier <- (data_2223$LastName == "HERONSOTO")
data_2223[data_2223$outlier == 1,]$LastName <- "HERON"
data_2223$outlier <- (data_2223$FirstName == "HILLARYALEXANDRA")
data_2223[data_2223$outlier == 1,]$FirstName<- "HILLARY"
data_2223$outlier <- (data_2223$LastName == "OSYSSEKREIMER")
data_2223[data_2223$outlier == 1,]$LastName<- "OSYSSEK"
data_2223$outlier <- (data_2223$FirstName == "AHTZIRIVIRIDIANA")
data_2223[data_2223$outlier == 1,]$FirstName<- "AHTZIRI"
data_2223$outlier <- (data_2223$FirstName == "ANDREIVASILE")
data_2223[data_2223$outlier == 1,]$FirstName<- "ANDREI"
data_2223$outlier <- (data_2223$FirstName == "CARLOS")+ (data_2223$LastName == "YULO")
data_2223[data_2223$outlier == 2,]$FirstName<- "CARLOSEDRIEL"
data_2223$outlier <- (data_2223$FirstName == "MAX")+ (data_2223$LastName == "WHITLOCKOBE")
data_2223[data_2223$outlier == 2,]$LastName<- "WHITLOCK"
data_2223$outlier <- (data_2223$FirstName == "MCRHYS")+ (data_2223$LastName == "CLENAGHAN")
data_2223[data_2223$outlier == 2,]$LastName<- "MCCLENAGHAN"
data_2223[data_2223$outlier == 2,]$FirsttName<- "RHYS"
data_2223$outlier <- (data_2223$FirstName == "CARLO")+ (data_2223$LastName == "HORR")
data_2223$outlier <- (data_2223$FirstName == "MCRHYS")+ (data_2223$LastName == "CLENAGHAN")
data_2223[data_2223$outlier == 2,]$LastName<- "MCCLENAGHAN"
data_2223[data_2223$outlier == 2,]$FirstName<- "RHYS"
source("~/Documents/GitHub/Gymnastics-Case-Study/get.data.r")
source("~/Documents/GitHub/Gymnastics-Case-Study/prep.data.r")
source("~/Documents/GitHub/Gymnastics-Case-Study/get.data.r")
# Separate data frames for men and women DONE
# Separate by apparatus DONE
# Remove duplicate rows
# Clean up names to match up athletes
# Clean up apparatus names (VT1 VT_1) DONE
# Separate qualifying & final (or superscore, etc)
# Do basic analysis based on the team
library(dplyr)
library(tidyr)
library(stringi)
library(stringr)
library(lubridate)
data_2223
# Remove spaces from names
data_2223$FirstName <- gsub(" ", "", data_2223$FirstName)
data_2223$LastName <- gsub(" ", "", data_2223$LastName)
#Removing all accents
data_2223$LastName <- stri_trans_general(data_2223$LastName, "Latin-ASCII")
data_2223$FirstName <- stri_trans_general(data_2223$FirstName, "Latin-ASCII")
# Remove non A-Z characters from names
data_2223$FirstName <- gsub("[[:punct:]]", "", data_2223$FirstName)
data_2223$LastName <- gsub("[[:punct:]]", "", data_2223$LastName)
# Split when there are spaces in between first names we are only checking when
# first name and last name and country matches for a person
data_2223 = separate(data_2223, FirstName, into = c("FirstName", "OtherName"),
sep = "^\\S*\\K\\s+")
# Convert all names to upper case
data_2223$FirstName = toupper(data_2223$FirstName)
data_2223$LastName = toupper(data_2223$LastName)
# Rename columns so that the same event is grouped together
data_2223$Apparatus <- gsub("hb", "HB", data_2223$Apparatus)
data_2223$Apparatus <- gsub("VT_1", "VT1", data_2223$Apparatus)
data_2223$Apparatus <- gsub("VT_2", "VT2", data_2223$Apparatus)
data_2223$Apparatus <- gsub("VT1", "VT", data_2223$Apparatus)
data_2223$Apparatus <- gsub("VT2", "VT", data_2223$Apparatus)
# Special cases for country
data_2223$Country <- gsub("CCS", "GUA", data_2223$Country)
data_2223$Country <- gsub("ENG", "GBR", data_2223$Country)
data_2223$Country <- gsub("IOM", "GBR", data_2223$Country)
data_2223$Country <- gsub("JEY", "GBR", data_2223$Country)
data_2223$Country <- gsub("SCO", "GBR", data_2223$Country)
data_2223$Country <- gsub("WAL", "GBR", data_2223$Country)
data_2223$Country <- gsub("GE1", "GER", data_2223$Country)
data_2223$Country <- gsub("GE2", "GER", data_2223$Country)
data_2223$Country <- gsub("NIR", "IRL", data_2223$Country) # come back to this if there are new athletes cause they might not all be IRL
# Special cases for individuals
data_2223$LastName[data_2223$LastName=="ODRISCOL"]="ODRISCOLL"
data_2223 = data_2223 %>%
mutate(FirstName = ifelse(FirstName=="SAM"&LastName=="ZAKUTNEY","SAMUEL",FirstName))
data_2223$outlier <- (data_2223$LastName == "BARBOSA") + (data_2223$FirstName == "JADE")
data_2223[data_2223$outlier == 2,]$Country <- "BRA"
data_2223$outlier <- (data_2223$LastName == "DJORDJEVIC") + (data_2223$FirstName == "DUSAN")
data_2223[data_2223$outlier == 2,]$Country <- "SRB"
# data_2223$outlier <- (data_2223$LastName == "GRÜNBERG") + (data_2223$FirstName == "JERMAIN")
# data_2223[data_2223$outlier == 2,]$Country <- "NED"
data_2223$outlier <- (data_2223$LastName == "JONASSON") + (data_2223$FirstName == "ARNTHOR")
data_2223[data_2223$outlier == 2,]$Country <- "ISL"
# data_2223$outlier <- (data_2223$LastName == "LIMA") + (data_2223$FirstName == "ANA")
# data_2223[data_2223$outlier == 2,]$Country <- "BRA"
# data_2223$outlier <- (data_2223$LastName == "MEULEMAN") + (data_2223$FirstName == "CASEY-JANE")
# data_2223[data_2223$outlier == 2,]$Country <- "NED"
data_2223$outlier <- (data_2223$LastName == "POGHOSYAN") + (data_2223$FirstName == "MANE")
data_2223[data_2223$outlier == 2,]$Country <- "ARM"
data_2223$outlier <- (data_2223$LastName == "RAPOSO") + (data_2223$FirstName == "CLARA")
data_2223[data_2223$outlier == 2,]$Country <- "CAN"
data_2223$outlier <- (data_2223$LastName == "TOVMASYAN") + (data_2223$FirstName == "ARTUR")
data_2223[data_2223$outlier == 2,]$Country <- "ARM"
data_2223$outlier <- (data_2223$LastName == "ZANETTI") + (data_2223$FirstName == "ARTHUR")
data_2223[data_2223$outlier == 2,]$Country <- "BRA"
# data_2223$outlier <- (data_2223$LastName=="CALLUM") + (data_2223$FirstName=="MC")
# data_2223[data_2223$outlier == 1,]$FirstName <- "GRACE"
# data_2223[data_2223$outlier == 1,]$LastName <- "MCCALLUM"
# data_2223$outlier <- (data_2223$FirstName == "CALLUM") + (data_2223$LastName == "MC")
# data_2223[data_2223$outlier == 2,]$FirstName <- "GRACE"
# data_2223[data_2223$outlier == 2,]$LastName <- "MCCALLUM"
data_2223$outlier <- (data_2223$FirstName == "FREDERICKNATHANIEL")
data_2223[data_2223$outlier == 1,]$FirstName <- "FREDERICK"
data_2223$outlier <- (data_2223$FirstName == "FRED") + (data_2223$LastName == "RICHARD")
data_2223[data_2223$outlier == 2,]$FirstName <- "FREDERICK"
data_2223$outlier <- (data_2223$FirstName == "KHOIALEXANDER") + (data_2223$LastName == "YOUNG")
data_2223[data_2223$outlier == 2,]$FirstName <- "KHOI"
data_2223$outlier <- (data_2223$FirstName == "CURRANMICHAEL") + (data_2223$LastName == "PHILLIPS")
data_2223[data_2223$outlier == 2,]$FirstName <- "CURRAN"
data_2223$outlier <- (data_2223$FirstName == "PAULINE") + (data_2223$LastName == "SCHAFER")
data_2223[data_2223$outlier == 2,]$LastName <- "SCHAEFERBETZ"
data_2223$outlier <- (data_2223$FirstName == "ALEXA") + (data_2223$LastName == "MORENOMEDINA")
data_2223[data_2223$outlier == 2,]$LastName <- "MORENO"
data_2223$outlier <- (data_2223$FirstName == "ALEXACITLALI") + (data_2223$LastName == "MORENOMEDINA")
data_2223[data_2223$outlier == 2,]$FirstName <- "ALEXA"
data_2223[data_2223$outlier == 2,]$LastName <- "MORENO"
data_2223$outlier <- (data_2223$FirstName == "NOESAMUEL") + (data_2223$LastName == "SEIFERT")
data_2223[data_2223$outlier == 2,]$FirstName <- "NOE"
data_2223$outlier <- (data_2223$LastName == "HERONSOTO")
data_2223[data_2223$outlier == 1,]$LastName <- "HERON"
data_2223$outlier <- (data_2223$FirstName == "HILLARYALEXANDRA")
data_2223[data_2223$outlier == 1,]$FirstName<- "HILLARY"
data_2223$outlier <- (data_2223$LastName == "OSYSSEKREIMER")
data_2223[data_2223$outlier == 1,]$LastName<- "OSYSSEK"
data_2223$outlier <- (data_2223$FirstName == "AHTZIRIVIRIDIANA")
data_2223[data_2223$outlier == 1,]$FirstName<- "AHTZIRI"
data_2223$outlier <- (data_2223$FirstName == "ANDREIVASILE")
data_2223[data_2223$outlier == 1,]$FirstName<- "ANDREI"
data_2223$outlier <- (data_2223$FirstName == "CARLOS")+ (data_2223$LastName == "YULO")
data_2223[data_2223$outlier == 2,]$FirstName<- "CARLOSEDRIEL"
data_2223$outlier <- (data_2223$FirstName == "MAX")+ (data_2223$LastName == "WHITLOCKOBE")
data_2223[data_2223$outlier == 2,]$LastName<- "WHITLOCK"
data_2223$outlier <- (data_2223$FirstName == "MCRHYS")+ (data_2223$LastName == "CLENAGHAN")
data_2223[data_2223$outlier == 2,]$LastName<- "MCCLENAGHAN"
data_2223[data_2223$outlier == 2,]$FirstName<- "RHYS"
data_2223$outlier <- (data_2223$FirstName == "CARLO")+ (data_2223$LastName == "HORR")
data_2223[data_2223$outlier == 2,]$LastName<- "HOERR"
data_2223$outlier <- (data_2223$FirstName == "LORANDE")+ (data_2223$LastName == "MUNCK")
data_2223[data_2223$outlier == 2,]$FirstName<- "LORAN"
data_2223[data_2223$outlier == 2,]$LastName<- "DEMUNCK"
data_2223$outlier <- (data_2223$LastName == "MUNCK")
data_2223[data_2223$outlier == 1,]$LastName<- "DEMUNCK"
data_2223$outlier <- (data_2223$FirstName == "DOMINIC")+ (data_2223$LastName == "TAMSEL")
data_2223[data_2223$outlier == 2,]$FirstName<- "DOMINIC"
data_2223$outlier <- (data_2223$FirstName == "MEHMETAYBERK")+ (data_2223$LastName == "KOSAK")
data_2223[data_2223$outlier == 2,]$FirstName<- "MEHMET"
data_2223$outlier <- (data_2223$FirstName == "ELSABETH")+ (data_2223$LastName == "BLACK")
data_2223[data_2223$outlier == 2,]$FirstName<- "ELLIE"
data_2223$outlier <- (data_2223$FirstName == "MELANIEDEJESUSDOS")+ (data_2223$LastName == "SANTOS")
data_2223[data_2223$outlier == 2,]$FirstName<- "MELANIE"
data_2223[data_2223$outlier == 2,]$LastName<- "DEJESUSDOSSANTOS"
data_2223$outlier <- (data_2223$FirstName == "MELANIEDEJESUSDOS")+ (data_2223$LastName == "SANTOS")
data_2223[data_2223$outlier == 2,]$FirstName<- "MELANIE"
data_2223[data_2223$outlier == 2,]$LastName<- "DEJESUSDOSSANTOS"
data_2223$outlier <- (data_2223$FirstName == "VERA")+ (data_2223$LastName == "POL")
data_2223[data_2223$outlier == 2,]$LastName<- "VANPOL"
data_2223$outlier <- (data_2223$FirstName == "EDOARDODE")+ (data_2223$LastName == "ROSA")
data_2223[data_2223$outlier == 2,]$LastName<- "DEROSA"
data_2223[data_2223$outlier == 2,]$FirstName<- "EDOARDO"
data_2223$outlier <- (data_2223$FirstName == "MARTIJN")+ (data_2223$LastName == "VEER")
data_2223[data_2223$outlier == 2,]$LastName<- "DEVEER"
data_2223 <- subset(data_2223, select = -outlier)
#Remove all duplicated rows
data_2223 = distinct(data_2223)
# Extract start dates and end dates
convertDate <- function(daterange){
daterange = gsub(",","",daterange)
dates = str_split(daterange,"-",simplify = T)
endDate = dmy(trimws(dates[2]))
start = str_split(trimws(dates[1])," ")[[1]]
if(length(start) ==1){
#print(paste(dates[1],format(as.Date(endDate, format="%d-%m-%Y"),"%m-%Y"),sep="-"))
startDate = dmy(paste(dates[1],format(as.Date(endDate, format="%d-%m-%Y"),"%m-%Y"),sep="-"))
}else if(length(start)==2){
startDate = dmy(paste(dates[1],format(as.Date(endDate, format="%d-%m-%Y"),"%Y"),sep="-"))
}else{
startDate = dmy(dates[1])
}
return(c(paste(startDate),paste(endDate)))
}
# Split data by gender
men <- data_2223[data_2223$Gender == "m",]
women <- data_2223[data_2223$Gender == "w",]
library("parallel")
library("foreach")
library("doParallel")
team_pick <- function(country_df, others_df, weights=rep(1,9), gender){
n<-99 # number of simulations of athletes
weights2 <- weights # for printing
weights <- 9*weights / sum(weights) # normalize to 9 (so medal sum normalizes to 1)
# Get country name
c <- country_df[1, "Country"] %>% as.character()
# Get all combinations of 5 athletes
comb <- country_df%>%
select(FirstName, LastName) %>%
mutate(name = paste(FirstName, LastName)) %>%
unique() %>% select(name) %>% unlist()%>% combn(5) %>% data.frame()
print(paste("Number of combinations",ncol(comb)))
# get a list of the athlete names from our country
team_names<- country_df %>% select(fullname) %>% unique() %>% unlist()
# The total potential lineup for qualifying, the exact combinations will be filtered later
qual_all <- rbind(country_df, others_df)
# Setting up workers for parallel processing
cl <- makeCluster(detectCores() -1)
registerDoParallel(cl, cores = detectCores() -1)
# looping through each of the simulations in parallel (all combinations are checked)
# for each simulation and stores the number of medals was for each of them
medal_scores2 = foreach(i = 1:n,.packages = c("dplyr"),.combine ="+",.inorder = FALSE)%dopar%{
##############
# NOTE
# Almost all the time of the code is not spent in this part of the loop
# Being a little inefficient is fine here, we want as many useful things
# for later being generated here
##############
medal_scores <- matrix(0,nrow = ncol(comb), ncol = 9)
colnames(medal_scores) <- c('team_g', 'team_s', 'team_b',
'aa_g', 'aa_s', 'aa_b',
'event_g', 'event_s', 'event_b')
# simulate scores for all athletes
qual_all$sim = rnorm(nrow(qual_all), qual_all$avg_score, qual_all$var_score)
# treat the all around like an additional event and add it to the dataframe
qual_all <- bind_rows(qual_all,qual_all%>% group_by(FirstName,LastName,Country,fullname) %>%
summarise(Apparatus = "AA",sim=sum(sim,na.rm = T)))
# Getting rid of unnecessary columns speeds up our code later when slicing data,etc
qual = qual_all %>% select(-c(FirstName,LastName,avg_score,var_score))
# Get simulation scores for other countries and current country of interest
other_team_sim <- qual %>% filter(Country!=c)
current_team_sim <- qual %>% filter(Country==c)
# Team round:
# We calculate the top 3 overall scores for all countries except the current country
# of interest. Choose best 3 for apparatus (Dumb way of picking top 3 for now)
team_comp <- other_team_sim %>% filter(Apparatus=="AA")%>%group_by(Country) %>%
slice_max(sim, n = 3, with_ties = F) %>%group_by(Country)%>% summarize(composite = sum(sim)) %>%
ungroup() %>% slice_max(composite,n=3,with_ties = F)
# Country of interest data frame for the all around
country_aa = current_team_sim%>%filter(Apparatus=="AA")
# We calculate the best score we could possibly have for the all-around, this lets
# us avoid having to find AA scores for each team combination later if its less than the
# third place score from other countries
country_best = country_aa%>%slice_max(sim, n = 3, with_ties = F)%>%select(sim) %>%sum()
country_can_win = as.logical(country_best >= team_comp[3,"composite"])
# Initialise team medals for all-around (updated when country_can_win=TRUE)
team_medals = c(0,0,0)
# Individual All Around: Calculate best 3 individual scores not from our country
# doing what we do with the events would be a speedup here
ind_aa <- other_team_sim %>% filter(Country!=c)%>% filter(Apparatus=="AA")%>%
group_by(Country) %>% # no more than 2 per country
slice_max(sim, n = 2, with_ties = F) %>% ungroup() %>%
slice_max(sim ,n=3,with_ties = F)
# Individual events: Get top 3 individual scores by event (not from country of interest)
top3_event <- other_team_sim %>% filter(Apparatus!="AA")%>% group_by(Country, Apparatus) %>%
slice_max(sim, n = 2, with_ties = F) %>% # no more than 2 per country
ungroup() %>% group_by(Apparatus) %>% slice_max(sim, n = 3, with_ties = F)
# We store the third place value by event (this lets us filter out athletes from our country of interest if they don't score this high)
third_place = (top3_event%>% group_by(Apparatus)%>%slice_min(sim,n=1,with_ties = F))$sim
names(third_place) = (top3_event%>% group_by(Apparatus)%>%slice_min(sim,n=1,with_ties = F))$Apparatus
# Includes athletes from our country,by event, that are larger than the third place we calculated above
# we store their raw place from the standings and their place within the team, these two values together
# can easily allow us to calculate the individual medals for a given combination quickly
event_fin_all = current_team_sim%>% filter(Apparatus!="AA")%>% group_by(Apparatus) %>%
filter(sim>=third_place[Apparatus])%>%arrange(desc(sim))%>%mutate(within_place=row_number()) %>%
ungroup() %>%bind_rows(top3_event)%>%group_by(Apparatus)%>%
arrange(desc(sim))%>%mutate(place=row_number()) %>% filter(Country==c)
# Check each combination and how many medals will come from it
for(j in 1:ncol(comb)){
cur_team_names <- unlist(comb[j])# find which team names are included in this loop
# Team AA:
#if country can't win team medals are 0, otherwise we calculate if we get a medal
if(country_can_win){
team_aa_country = country_aa %>% filter(fullname %in% cur_team_names) %>%
slice_max(sim, n = 3, with_ties = F)%>% summarize(Country = c,composite = sum(sim))%>%rbind(team_comp)%>%
slice_max(composite,n=3,with_ties = F)
team_medals = as.numeric(team_aa_country[1:3,'Country']==c)
}
# Individual AA: determine if our team has any AA winners
ind_aa_country <- country_aa %>% filter(fullname %in% cur_team_names) %>%
slice_max(sim ,n=2,with_ties = F) %>% rbind(ind_aa) %>%
slice_max(sim,n=3,with_ties = F)
# Individual events: determine how each athlete places in the individual events we use the
# raw place and within country place to find this and calculate medals from this
event_fin_country = event_fin_all%>% filter(fullname %in% cur_team_names)%>%
group_by(Apparatus)%>% mutate(difference =
ifelse(!is.na(within_place-lag(within_place)),within_place-lag(within_place)-1,0))%>%
mutate(place=place-difference) %>% filter(place<=3)%>%group_by(place)%>%
summarise(medals = n())%>%arrange(desc(place))%>%as.vector()
ind_medals = event_fin_country$medals
names(ind_medals) = event_fin_country$place
ind_medals= ind_medals[c("1","2","3")]
ind_medals[is.na(ind_medals)] <- 0
medal_scores[j,] <- medal_scores[j,] + c(team_medals,
as.numeric(ind_aa_country[1:3,'Country']==c),
ind_medals)
}
medal_scores
}
# stop cluster
stopCluster(cl)
# output what the number of medals for our score was
write.csv(medal_scores2/n, paste0("davidsims/scores-", paste(weights2,collapse="."),"-",c,"-", gender, ".csv"), row.names=FALSE)
write.csv(comb, paste0("davidsims/names-",paste(weights2,collapse="."),"-",c,"-", gender, ".csv"), row.names=FALSE)
# DM - the lines below don't do anything because they're inside the
# function, but they work as a way to consolidate the data frame in a
# separate R script (replacing paste with scores-w and names-w, obviously)
# scores <- read.csv(paste0("fullsims/scores-", paste(weights2,collapse="."),
#                           "-",c,"-",gender, ".csv"))
# scores$composite <- rowSums(scores)
# names <- read.csv(paste0("fullsims/names-",paste(weights2,collapse="."),"-",c,"-", gender, ".csv"))
# scores$name1 <- unlist(names[1,], use.names=FALSE)
# scores$name2 <- unlist(names[2,], use.names=FALSE)
# scores$name3 <- unlist(names[3,], use.names=FALSE)
# scores$name4 <- unlist(names[4,], use.names=FALSE)
# scores$name5 <- unlist(names[5,], use.names=FALSE)
#now multiply by weight
medal_scores2 = t(apply(medal_scores2,1,function(x) x*weights))
print(max(rowSums(medal_scores2))/n)
return(comb[which.max(rowSums(medal_scores2,na.rm = T))])
}
# Silencing some annoying messages
options("dplyr.summarise.inform" = F)
countries_men <- c('USA', 'CHN', 'JPN', 'GBR', 'ITA', 'ESP',
'GER', 'CAN', 'TUR', 'SUI', 'NED', 'UKR')
countries_women <- c('USA', 'GBR', 'CAN', 'BRA', 'ITA', 'CHN',
'JPN', 'FRA', 'NED', 'ROU', 'AUS', 'KOR')
men_df <- data_2223 %>%
select(FirstName, LastName, Gender, Country, Apparatus, Score) %>%
drop_na() %>%
filter(Gender == 'm', Country %in% countries_men) %>%
group_by(FirstName, LastName, Country, Apparatus) %>%
summarize(avg_score = mean(Score,na.rm=T),
var_score = ifelse(is.na(var(Score)),0,sqrt(var(Score))),
Country=Country[1]) %>%
arrange(var_score) %>%
head(-floor(nrow(.)/15)) %>% mutate(fullname=paste(FirstName,LastName))
women_df <- data_2223 %>%
filter(Gender == 'w', Country %in% countries_women) %>%
group_by(FirstName, LastName, Country, Apparatus) %>%
summarize(avg_score = mean(Score,na.rm=T),
var_score = ifelse(is.na(var(Score)),0,sqrt(var(Score))),
Country=Country[1]) %>%
arrange(var_score) %>%
head(-floor(nrow(.)/15))%>% mutate(fullname=paste(FirstName,LastName))
#######
men_all_df = data_2223 %>%
select(FirstName, LastName, Gender, Country, Apparatus, Score) %>%
drop_na() %>%
filter(Gender == 'm') %>%
group_by(FirstName, LastName, Country, Apparatus) %>%
summarize(avg_score = mean(Score,na.rm=T),
var_score = ifelse(is.na(var(Score)),0,sqrt(var(Score))),
Country=Country[1]) %>%
arrange(var_score) %>%
head(-floor(nrow(.)/15))%>%
mutate(fullname=paste(FirstName,LastName))
men_others =men_all_df%>% group_by(FirstName,LastName,Country) %>%
summarise(Apparatus = "AA",avg_score=sum(avg_score),var_score=0)%>%
filter(!(Country %in% countries_men))%>%
arrange(avg_score)%>%head(36)%>% select(FirstName,LastName) %>%left_join(men_all_df)%>%
mutate(fullname=paste(FirstName,LastName))
women_all_df = data_2223 %>%
select(FirstName, LastName, Gender, Country, Apparatus, Score) %>%
drop_na() %>%
filter(Gender == 'w') %>%
group_by(FirstName, LastName, Country, Apparatus) %>%
summarize(avg_score = mean(Score,na.rm=T),
var_score = ifelse(is.na(var(Score)),0,sqrt(var(Score))),
Country=Country[1]) %>%
arrange(var_score) %>%
head(-floor(nrow(.)/15))%>%
mutate(fullname=paste(FirstName,LastName))
women_others =women_all_df%>% group_by(FirstName,LastName,Country) %>%
summarise(Apparatus = "AA",avg_score=sum(avg_score),var_score=0)%>%
filter(!(Country %in% countries_women))%>%
arrange(avg_score)%>%head(36)%>% select(FirstName,LastName) %>%left_join(women_all_df)%>%
mutate(fullname=paste(FirstName,LastName))
########
men_df_composite_top5 <- men_df%>% group_by(FirstName,LastName,Country) %>%
summarise(Apparatus = "AA",avg_score=sum(avg_score),var_score=0) %>%
group_by(Country) %>%slice_max(avg_score,n=3,with_ties = F) %>%
mutate(fullname = paste(FirstName, LastName))
women_df_composite_top5 <- women_df%>% group_by(FirstName,LastName,Country) %>%
summarise(Apparatus = "AA",avg_score=sum(avg_score),var_score=0) %>%
group_by(Country) %>%slice_max(avg_score,n=3,with_ties = F) %>%
mutate(fullname = paste(FirstName, LastName))
men_top5 <- men_df %>%
group_by(Country, Apparatus) %>%
slice_max(avg_score, n = 3, with_ties = F) %>% ungroup() %>%
mutate(fullname = paste(FirstName, LastName))
men_top5_names <- men_top5 %>% rbind(men_df_composite_top5)%>%
select(FirstName, LastName, Country) %>% unique()
women_top5 <- women_df %>%
group_by(Country, Apparatus) %>%
slice_max(avg_score, n = 4, with_ties = F)%>% ungroup()%>%
mutate(fullname = paste(FirstName, LastName))
women_top5_names <- women_top5 %>% rbind(women_df_composite_top5)%>%
select(FirstName, LastName, Country) %>% unique()
table(men_top5_names$Country)
table(women_top5_names$Country)
# --------SC-------
# If a combination contains 0 top 1 athletes for any event, exclude it
# we can change this to say how many top 1 athletes we require for a valid
# comb
contains_top_1<-function(comb,country_df,type="men"){
if(type=="men"){
min=1
}else{
min=1
}
top_1s = (country_df %>%group_by(Apparatus)%>%slice_max(avg_score,n=1,with_ties = F)%>%
ungroup()%>%select(fullname) %>% unique())[['fullname']]
return(length(intersect(as.vector(unlist(comb)),top_1s))>=min)
}
set.seed(123)
source('teampick.R')
weights_list <- list(c(0,0,1), c(0,1,0), c(1,0,0), c(0,1,1), c(1,0,1), c(1,1,0), c(0,1,2), c(0,2,1), c(1,0,2), c(1,2,0), c(2,0,1), c(2,1,0), c(1,1,1), c(1,1,2), c(1,2,1), c(2,1,1), c(1,2,2),c(2,1,2), c(2,2,1))
priority_list <- list(c(1,1,1), c(1,0,0), c(3,2,1))
weight_vectors <- list()
index <- 1
for (i in (1:19)) {
for (j in (1:3)) {
weight_vectors[[index]] <- as.vector(outer(priority_list[[j]], weights_list[[i]],"*"))
index <- index + 1
}
}
weight_vectors2 <- weight_vectors[37]
# Initialize teams randomly
random_teams <- men_top5_names %>% group_by(Country) %>% sample_n(5) %>%
left_join(men_df) %>% arrange(FirstName, LastName)
team_roster <- random_teams
men_others
tm = Sys.time()
# Loop over countries one by one and go through each combination
for(weight_vector in weight_vectors2){
for (country in rep(rev(countries_men), 2)){
print(country)
tm2 = Sys.time()
#current <- men_top5 %>%ungroup() %>%filter(Country == country)
current <- men_top5_names %>% filter(Country==country) %>%
left_join(men_df)
other_teams <- team_roster %>% filter(Country != country)
best_team <- team_pick(current, other_teams, weights = weight_vector,
gender='m')
print(best_team)
# Update team list with optimal team
team_roster <- rbind(other_teams,
men_df %>% filter(fullname %in% unlist(best_team)))
print(Sys.time()-tm2)
}
print(Sys.time()-tm)
}
# Time to pick!
source('./teampick.R')
# Initialize teams randomly
random_teams <- women_top5_names %>% group_by(Country) %>% sample_n(5) %>%
left_join(women_df) %>% arrange(FirstName, LastName)
team_roster <- random_teams
tm = Sys.time()
# Loop over countries one by one and go through each combination
for(weight_vector in weight_vectors2){
for (country in rep(rev(countries_women),2)){
tm2 = Sys.time()
print(country)
#current <- women_top5 %>% filter(Country == country)
current <- women_top5_names %>% filter(Country==country) %>%
left_join(women_df)
other_teams <- team_roster %>% filter(Country != country)
best_team <- team_pick(current, other_teams, gender='w',
weights = weight_vector)
print(as.vector(best_team))
# Update team list with optimal team
team_roster <- rbind(other_teams,
women_df%>% filter(fullname %in% unlist(best_team)))
print(Sys.time()-tm2)
}
print(Sys.time()-tm)
}
